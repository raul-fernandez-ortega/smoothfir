# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# *
# * (c) Copyright 2013/2022 -- Raul Fernandez Ortega
# *
# * This program is open source. For license terms, see the LICENSE file.
# *
# *

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_smoothfir', [dirname(__file__)])
        except ImportError:
            import _smoothfir
            return _smoothfir
        if fp is not None:
            try:
                _mod = imp.load_module('_smoothfir', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _smoothfir = swig_import_helper()
    del swig_import_helper
else:
    import _smoothfir
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _smoothfir.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _smoothfir.SwigPyIterator_value(self)
    def incr(self, n=1): return _smoothfir.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _smoothfir.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _smoothfir.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _smoothfir.SwigPyIterator_equal(self, *args)
    def copy(self): return _smoothfir.SwigPyIterator_copy(self)
    def next(self): return _smoothfir.SwigPyIterator_next(self)
    def __next__(self): return _smoothfir.SwigPyIterator___next__(self)
    def previous(self): return _smoothfir.SwigPyIterator_previous(self)
    def advance(self, *args): return _smoothfir.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _smoothfir.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _smoothfir.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _smoothfir.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _smoothfir.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _smoothfir.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _smoothfir.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _smoothfir.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class sfcoeff(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sfcoeff, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sfcoeff, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_shared"] = _smoothfir.sfcoeff_is_shared_set
    __swig_getmethods__["is_shared"] = _smoothfir.sfcoeff_is_shared_get
    if _newclass:is_shared = _swig_property(_smoothfir.sfcoeff_is_shared_get, _smoothfir.sfcoeff_is_shared_set)
    __swig_setmethods__["name"] = _smoothfir.sfcoeff_name_set
    __swig_getmethods__["name"] = _smoothfir.sfcoeff_name_get
    if _newclass:name = _swig_property(_smoothfir.sfcoeff_name_get, _smoothfir.sfcoeff_name_set)
    __swig_setmethods__["intname"] = _smoothfir.sfcoeff_intname_set
    __swig_getmethods__["intname"] = _smoothfir.sfcoeff_intname_get
    if _newclass:intname = _swig_property(_smoothfir.sfcoeff_intname_get, _smoothfir.sfcoeff_intname_set)
    __swig_setmethods__["n_blocks"] = _smoothfir.sfcoeff_n_blocks_set
    __swig_getmethods__["n_blocks"] = _smoothfir.sfcoeff_n_blocks_get
    if _newclass:n_blocks = _swig_property(_smoothfir.sfcoeff_n_blocks_get, _smoothfir.sfcoeff_n_blocks_set)
    def __init__(self): 
        this = _smoothfir.new_sfcoeff()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_sfcoeff
    __del__ = lambda self : None;
sfcoeff_swigregister = _smoothfir.sfcoeff_swigregister
sfcoeff_swigregister(sfcoeff)

class sfchannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sfchannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sfchannel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _smoothfir.sfchannel_name_set
    __swig_getmethods__["name"] = _smoothfir.sfchannel_name_get
    if _newclass:name = _swig_property(_smoothfir.sfchannel_name_get, _smoothfir.sfchannel_name_set)
    __swig_setmethods__["intname"] = _smoothfir.sfchannel_intname_set
    __swig_getmethods__["intname"] = _smoothfir.sfchannel_intname_get
    if _newclass:intname = _swig_property(_smoothfir.sfchannel_intname_get, _smoothfir.sfchannel_intname_set)
    def __init__(self): 
        this = _smoothfir.new_sfchannel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_sfchannel
    __del__ = lambda self : None;
sfchannel_swigregister = _smoothfir.sfchannel_swigregister
sfchannel_swigregister(sfchannel)

class sffilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sffilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sffilter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _smoothfir.sffilter_name_set
    __swig_getmethods__["name"] = _smoothfir.sffilter_name_get
    if _newclass:name = _swig_property(_smoothfir.sffilter_name_get, _smoothfir.sffilter_name_set)
    __swig_setmethods__["intname"] = _smoothfir.sffilter_intname_set
    __swig_getmethods__["intname"] = _smoothfir.sffilter_intname_get
    if _newclass:intname = _swig_property(_smoothfir.sffilter_intname_get, _smoothfir.sffilter_intname_set)
    __swig_setmethods__["crossfade"] = _smoothfir.sffilter_crossfade_set
    __swig_getmethods__["crossfade"] = _smoothfir.sffilter_crossfade_get
    if _newclass:crossfade = _swig_property(_smoothfir.sffilter_crossfade_get, _smoothfir.sffilter_crossfade_set)
    __swig_setmethods__["n_channels"] = _smoothfir.sffilter_n_channels_set
    __swig_getmethods__["n_channels"] = _smoothfir.sffilter_n_channels_get
    if _newclass:n_channels = _swig_property(_smoothfir.sffilter_n_channels_get, _smoothfir.sffilter_n_channels_set)
    __swig_setmethods__["channels"] = _smoothfir.sffilter_channels_set
    __swig_getmethods__["channels"] = _smoothfir.sffilter_channels_get
    if _newclass:channels = _swig_property(_smoothfir.sffilter_channels_get, _smoothfir.sffilter_channels_set)
    __swig_setmethods__["n_filters"] = _smoothfir.sffilter_n_filters_set
    __swig_getmethods__["n_filters"] = _smoothfir.sffilter_n_filters_get
    if _newclass:n_filters = _swig_property(_smoothfir.sffilter_n_filters_get, _smoothfir.sffilter_n_filters_set)
    __swig_setmethods__["filters"] = _smoothfir.sffilter_filters_set
    __swig_getmethods__["filters"] = _smoothfir.sffilter_filters_get
    if _newclass:filters = _swig_property(_smoothfir.sffilter_filters_get, _smoothfir.sffilter_filters_set)
    def __init__(self): 
        this = _smoothfir.new_sffilter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_sffilter
    __del__ = lambda self : None;
sffilter_swigregister = _smoothfir.sffilter_swigregister
sffilter_swigregister(sffilter)

class sffilter_control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sffilter_control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sffilter_control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["coeff"] = _smoothfir.sffilter_control_coeff_set
    __swig_getmethods__["coeff"] = _smoothfir.sffilter_control_coeff_get
    if _newclass:coeff = _swig_property(_smoothfir.sffilter_control_coeff_get, _smoothfir.sffilter_control_coeff_set)
    __swig_setmethods__["delayblocks"] = _smoothfir.sffilter_control_delayblocks_set
    __swig_getmethods__["delayblocks"] = _smoothfir.sffilter_control_delayblocks_get
    if _newclass:delayblocks = _swig_property(_smoothfir.sffilter_control_delayblocks_get, _smoothfir.sffilter_control_delayblocks_set)
    __swig_setmethods__["scale"] = _smoothfir.sffilter_control_scale_set
    __swig_getmethods__["scale"] = _smoothfir.sffilter_control_scale_get
    if _newclass:scale = _swig_property(_smoothfir.sffilter_control_scale_get, _smoothfir.sffilter_control_scale_set)
    __swig_setmethods__["fscale"] = _smoothfir.sffilter_control_fscale_set
    __swig_getmethods__["fscale"] = _smoothfir.sffilter_control_fscale_get
    if _newclass:fscale = _swig_property(_smoothfir.sffilter_control_fscale_get, _smoothfir.sffilter_control_fscale_set)
    def __init__(self): 
        this = _smoothfir.new_sffilter_control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_sffilter_control
    __del__ = lambda self : None;
sffilter_control_swigregister = _smoothfir.sffilter_control_swigregister
sffilter_control_swigregister(sffilter_control)

class intercomm_area(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intercomm_area, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intercomm_area, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doreset_overflow"] = _smoothfir.intercomm_area_doreset_overflow_set
    __swig_getmethods__["doreset_overflow"] = _smoothfir.intercomm_area_doreset_overflow_get
    if _newclass:doreset_overflow = _swig_property(_smoothfir.intercomm_area_doreset_overflow_get, _smoothfir.intercomm_area_doreset_overflow_set)
    __swig_setmethods__["sync"] = _smoothfir.intercomm_area_sync_set
    __swig_getmethods__["sync"] = _smoothfir.intercomm_area_sync_get
    if _newclass:sync = _swig_property(_smoothfir.intercomm_area_sync_get, _smoothfir.intercomm_area_sync_set)
    __swig_setmethods__["period_us"] = _smoothfir.intercomm_area_period_us_set
    __swig_getmethods__["period_us"] = _smoothfir.intercomm_area_period_us_get
    if _newclass:period_us = _swig_property(_smoothfir.intercomm_area_period_us_get, _smoothfir.intercomm_area_period_us_set)
    __swig_setmethods__["realtime_index"] = _smoothfir.intercomm_area_realtime_index_set
    __swig_getmethods__["realtime_index"] = _smoothfir.intercomm_area_realtime_index_get
    if _newclass:realtime_index = _swig_property(_smoothfir.intercomm_area_realtime_index_get, _smoothfir.intercomm_area_realtime_index_set)
    __swig_setmethods__["fctrl"] = _smoothfir.intercomm_area_fctrl_set
    __swig_getmethods__["fctrl"] = _smoothfir.intercomm_area_fctrl_get
    if _newclass:fctrl = _swig_property(_smoothfir.intercomm_area_fctrl_get, _smoothfir.intercomm_area_fctrl_set)
    __swig_setmethods__["in_overflow"] = _smoothfir.intercomm_area_in_overflow_set
    __swig_getmethods__["in_overflow"] = _smoothfir.intercomm_area_in_overflow_get
    if _newclass:in_overflow = _swig_property(_smoothfir.intercomm_area_in_overflow_get, _smoothfir.intercomm_area_in_overflow_set)
    __swig_setmethods__["out_overflow"] = _smoothfir.intercomm_area_out_overflow_set
    __swig_getmethods__["out_overflow"] = _smoothfir.intercomm_area_out_overflow_get
    if _newclass:out_overflow = _swig_property(_smoothfir.intercomm_area_out_overflow_get, _smoothfir.intercomm_area_out_overflow_set)
    __swig_setmethods__["ismuted"] = _smoothfir.intercomm_area_ismuted_set
    __swig_getmethods__["ismuted"] = _smoothfir.intercomm_area_ismuted_get
    if _newclass:ismuted = _swig_property(_smoothfir.intercomm_area_ismuted_get, _smoothfir.intercomm_area_ismuted_set)
    __swig_setmethods__["delay"] = _smoothfir.intercomm_area_delay_set
    __swig_getmethods__["delay"] = _smoothfir.intercomm_area_delay_get
    if _newclass:delay = _swig_property(_smoothfir.intercomm_area_delay_get, _smoothfir.intercomm_area_delay_set)
    __swig_setmethods__["full_proc"] = _smoothfir.intercomm_area_full_proc_set
    __swig_getmethods__["full_proc"] = _smoothfir.intercomm_area_full_proc_get
    if _newclass:full_proc = _swig_property(_smoothfir.intercomm_area_full_proc_get, _smoothfir.intercomm_area_full_proc_set)
    __swig_setmethods__["ignore_rtprio"] = _smoothfir.intercomm_area_ignore_rtprio_set
    __swig_getmethods__["ignore_rtprio"] = _smoothfir.intercomm_area_ignore_rtprio_get
    if _newclass:ignore_rtprio = _swig_property(_smoothfir.intercomm_area_ignore_rtprio_get, _smoothfir.intercomm_area_ignore_rtprio_set)
    def __init__(self): 
        this = _smoothfir.new_intercomm_area()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_intercomm_area
    __del__ = lambda self : None;
intercomm_area_swigregister = _smoothfir.intercomm_area_swigregister
intercomm_area_swigregister(intercomm_area)

class sample_format(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sample_format, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sample_format, name)
    __repr__ = _swig_repr
    __swig_setmethods__["isfloat"] = _smoothfir.sample_format_isfloat_set
    __swig_getmethods__["isfloat"] = _smoothfir.sample_format_isfloat_get
    if _newclass:isfloat = _swig_property(_smoothfir.sample_format_isfloat_get, _smoothfir.sample_format_isfloat_set)
    __swig_setmethods__["swap"] = _smoothfir.sample_format_swap_set
    __swig_getmethods__["swap"] = _smoothfir.sample_format_swap_get
    if _newclass:swap = _swig_property(_smoothfir.sample_format_swap_get, _smoothfir.sample_format_swap_set)
    __swig_setmethods__["bytes"] = _smoothfir.sample_format_bytes_set
    __swig_getmethods__["bytes"] = _smoothfir.sample_format_bytes_get
    if _newclass:bytes = _swig_property(_smoothfir.sample_format_bytes_get, _smoothfir.sample_format_bytes_set)
    __swig_setmethods__["sbytes"] = _smoothfir.sample_format_sbytes_set
    __swig_getmethods__["sbytes"] = _smoothfir.sample_format_sbytes_get
    if _newclass:sbytes = _swig_property(_smoothfir.sample_format_sbytes_get, _smoothfir.sample_format_sbytes_set)
    __swig_setmethods__["scale"] = _smoothfir.sample_format_scale_set
    __swig_getmethods__["scale"] = _smoothfir.sample_format_scale_get
    if _newclass:scale = _swig_property(_smoothfir.sample_format_scale_get, _smoothfir.sample_format_scale_set)
    __swig_setmethods__["format"] = _smoothfir.sample_format_format_set
    __swig_getmethods__["format"] = _smoothfir.sample_format_format_get
    if _newclass:format = _swig_property(_smoothfir.sample_format_format_get, _smoothfir.sample_format_format_set)
    def __init__(self): 
        this = _smoothfir.new_sample_format()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_sample_format
    __del__ = lambda self : None;
sample_format_swigregister = _smoothfir.sample_format_swigregister
sample_format_swigregister(sample_format)

class buffer_format(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, buffer_format, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, buffer_format, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sf"] = _smoothfir.buffer_format_sf_set
    __swig_getmethods__["sf"] = _smoothfir.buffer_format_sf_get
    if _newclass:sf = _swig_property(_smoothfir.buffer_format_sf_get, _smoothfir.buffer_format_sf_set)
    __swig_setmethods__["sample_spacing"] = _smoothfir.buffer_format_sample_spacing_set
    __swig_getmethods__["sample_spacing"] = _smoothfir.buffer_format_sample_spacing_get
    if _newclass:sample_spacing = _swig_property(_smoothfir.buffer_format_sample_spacing_get, _smoothfir.buffer_format_sample_spacing_set)
    __swig_setmethods__["byte_offset"] = _smoothfir.buffer_format_byte_offset_set
    __swig_getmethods__["byte_offset"] = _smoothfir.buffer_format_byte_offset_get
    if _newclass:byte_offset = _swig_property(_smoothfir.buffer_format_byte_offset_get, _smoothfir.buffer_format_byte_offset_set)
    def __init__(self): 
        this = _smoothfir.new_buffer_format()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_buffer_format
    __del__ = lambda self : None;
buffer_format_swigregister = _smoothfir.buffer_format_swigregister
buffer_format_swigregister(buffer_format)

class filter_process(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, filter_process, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, filter_process, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_unique_channels"] = _smoothfir.filter_process_n_unique_channels_set
    __swig_getmethods__["n_unique_channels"] = _smoothfir.filter_process_n_unique_channels_get
    if _newclass:n_unique_channels = _swig_property(_smoothfir.filter_process_n_unique_channels_get, _smoothfir.filter_process_n_unique_channels_set)
    __swig_setmethods__["unique_channels"] = _smoothfir.filter_process_unique_channels_set
    __swig_getmethods__["unique_channels"] = _smoothfir.filter_process_unique_channels_get
    if _newclass:unique_channels = _swig_property(_smoothfir.filter_process_unique_channels_get, _smoothfir.filter_process_unique_channels_set)
    __swig_setmethods__["n_filters"] = _smoothfir.filter_process_n_filters_set
    __swig_getmethods__["n_filters"] = _smoothfir.filter_process_n_filters_get
    if _newclass:n_filters = _swig_property(_smoothfir.filter_process_n_filters_get, _smoothfir.filter_process_n_filters_set)
    __swig_setmethods__["filters"] = _smoothfir.filter_process_filters_set
    __swig_getmethods__["filters"] = _smoothfir.filter_process_filters_get
    if _newclass:filters = _swig_property(_smoothfir.filter_process_filters_get, _smoothfir.filter_process_filters_set)
    def __init__(self): 
        this = _smoothfir.new_filter_process()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_filter_process
    __del__ = lambda self : None;
filter_process_swigregister = _smoothfir.filter_process_swigregister
filter_process_swigregister(filter_process)

class dai_channels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dai_channels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dai_channels, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sf"] = _smoothfir.dai_channels_sf_set
    __swig_getmethods__["sf"] = _smoothfir.dai_channels_sf_get
    if _newclass:sf = _swig_property(_smoothfir.dai_channels_sf_get, _smoothfir.dai_channels_sf_set)
    __swig_setmethods__["open_channels"] = _smoothfir.dai_channels_open_channels_set
    __swig_getmethods__["open_channels"] = _smoothfir.dai_channels_open_channels_get
    if _newclass:open_channels = _swig_property(_smoothfir.dai_channels_open_channels_get, _smoothfir.dai_channels_open_channels_set)
    __swig_setmethods__["used_channels"] = _smoothfir.dai_channels_used_channels_set
    __swig_getmethods__["used_channels"] = _smoothfir.dai_channels_used_channels_get
    if _newclass:used_channels = _swig_property(_smoothfir.dai_channels_used_channels_get, _smoothfir.dai_channels_used_channels_set)
    __swig_setmethods__["channel_selection"] = _smoothfir.dai_channels_channel_selection_set
    __swig_getmethods__["channel_selection"] = _smoothfir.dai_channels_channel_selection_get
    if _newclass:channel_selection = _swig_property(_smoothfir.dai_channels_channel_selection_get, _smoothfir.dai_channels_channel_selection_set)
    __swig_setmethods__["channel_name"] = _smoothfir.dai_channels_channel_name_set
    __swig_getmethods__["channel_name"] = _smoothfir.dai_channels_channel_name_get
    if _newclass:channel_name = _swig_property(_smoothfir.dai_channels_channel_name_get, _smoothfir.dai_channels_channel_name_set)
    def __init__(self): 
        this = _smoothfir.new_dai_channels()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_dai_channels
    __del__ = lambda self : None;
dai_channels_swigregister = _smoothfir.dai_channels_swigregister
dai_channels_swigregister(dai_channels)

class _delaybuffer_t_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _delaybuffer_t_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _delaybuffer_t_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fragsize"] = _smoothfir._delaybuffer_t__fragsize_set
    __swig_getmethods__["fragsize"] = _smoothfir._delaybuffer_t__fragsize_get
    if _newclass:fragsize = _swig_property(_smoothfir._delaybuffer_t__fragsize_get, _smoothfir._delaybuffer_t__fragsize_set)
    __swig_setmethods__["maxdelay"] = _smoothfir._delaybuffer_t__maxdelay_set
    __swig_getmethods__["maxdelay"] = _smoothfir._delaybuffer_t__maxdelay_get
    if _newclass:maxdelay = _swig_property(_smoothfir._delaybuffer_t__maxdelay_get, _smoothfir._delaybuffer_t__maxdelay_set)
    __swig_setmethods__["curdelay"] = _smoothfir._delaybuffer_t__curdelay_set
    __swig_getmethods__["curdelay"] = _smoothfir._delaybuffer_t__curdelay_get
    if _newclass:curdelay = _swig_property(_smoothfir._delaybuffer_t__curdelay_get, _smoothfir._delaybuffer_t__curdelay_set)
    __swig_setmethods__["curbuf"] = _smoothfir._delaybuffer_t__curbuf_set
    __swig_getmethods__["curbuf"] = _smoothfir._delaybuffer_t__curbuf_get
    if _newclass:curbuf = _swig_property(_smoothfir._delaybuffer_t__curbuf_get, _smoothfir._delaybuffer_t__curbuf_set)
    __swig_setmethods__["n_fbufs"] = _smoothfir._delaybuffer_t__n_fbufs_set
    __swig_getmethods__["n_fbufs"] = _smoothfir._delaybuffer_t__n_fbufs_get
    if _newclass:n_fbufs = _swig_property(_smoothfir._delaybuffer_t__n_fbufs_get, _smoothfir._delaybuffer_t__n_fbufs_set)
    __swig_setmethods__["n_fbufs_cap"] = _smoothfir._delaybuffer_t__n_fbufs_cap_set
    __swig_getmethods__["n_fbufs_cap"] = _smoothfir._delaybuffer_t__n_fbufs_cap_get
    if _newclass:n_fbufs_cap = _swig_property(_smoothfir._delaybuffer_t__n_fbufs_cap_get, _smoothfir._delaybuffer_t__n_fbufs_cap_set)
    __swig_setmethods__["fbufs"] = _smoothfir._delaybuffer_t__fbufs_set
    __swig_getmethods__["fbufs"] = _smoothfir._delaybuffer_t__fbufs_get
    if _newclass:fbufs = _swig_property(_smoothfir._delaybuffer_t__fbufs_get, _smoothfir._delaybuffer_t__fbufs_set)
    __swig_setmethods__["n_rest"] = _smoothfir._delaybuffer_t__n_rest_set
    __swig_getmethods__["n_rest"] = _smoothfir._delaybuffer_t__n_rest_get
    if _newclass:n_rest = _swig_property(_smoothfir._delaybuffer_t__n_rest_get, _smoothfir._delaybuffer_t__n_rest_set)
    __swig_setmethods__["rbuf"] = _smoothfir._delaybuffer_t__rbuf_set
    __swig_getmethods__["rbuf"] = _smoothfir._delaybuffer_t__rbuf_get
    if _newclass:rbuf = _swig_property(_smoothfir._delaybuffer_t__rbuf_get, _smoothfir._delaybuffer_t__rbuf_set)
    __swig_setmethods__["shortbuf"] = _smoothfir._delaybuffer_t__shortbuf_set
    __swig_getmethods__["shortbuf"] = _smoothfir._delaybuffer_t__shortbuf_get
    if _newclass:shortbuf = _swig_property(_smoothfir._delaybuffer_t__shortbuf_get, _smoothfir._delaybuffer_t__shortbuf_set)
    def __init__(self): 
        this = _smoothfir.new__delaybuffer_t_()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete__delaybuffer_t_
    __del__ = lambda self : None;
_delaybuffer_t__swigregister = _smoothfir._delaybuffer_t__swigregister
_delaybuffer_t__swigregister(_delaybuffer_t_)

class subdev(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subdev, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subdev, name)
    __repr__ = _swig_repr
    __swig_setmethods__["finished"] = _smoothfir.subdev_finished_set
    __swig_getmethods__["finished"] = _smoothfir.subdev_finished_get
    if _newclass:finished = _swig_property(_smoothfir.subdev_finished_get, _smoothfir.subdev_finished_set)
    __swig_setmethods__["isinterleaved"] = _smoothfir.subdev_isinterleaved_set
    __swig_getmethods__["isinterleaved"] = _smoothfir.subdev_isinterleaved_get
    if _newclass:isinterleaved = _swig_property(_smoothfir.subdev_isinterleaved_get, _smoothfir.subdev_isinterleaved_set)
    __swig_setmethods__["bad_alignment"] = _smoothfir.subdev_bad_alignment_set
    __swig_getmethods__["bad_alignment"] = _smoothfir.subdev_bad_alignment_get
    if _newclass:bad_alignment = _swig_property(_smoothfir.subdev_bad_alignment_get, _smoothfir.subdev_bad_alignment_set)
    __swig_setmethods__["index"] = _smoothfir.subdev_index_set
    __swig_getmethods__["index"] = _smoothfir.subdev_index_get
    if _newclass:index = _swig_property(_smoothfir.subdev_index_get, _smoothfir.subdev_index_set)
    __swig_setmethods__["fd"] = _smoothfir.subdev_fd_set
    __swig_getmethods__["fd"] = _smoothfir.subdev_fd_get
    if _newclass:fd = _swig_property(_smoothfir.subdev_fd_get, _smoothfir.subdev_fd_set)
    __swig_setmethods__["buf_size"] = _smoothfir.subdev_buf_size_set
    __swig_getmethods__["buf_size"] = _smoothfir.subdev_buf_size_get
    if _newclass:buf_size = _swig_property(_smoothfir.subdev_buf_size_get, _smoothfir.subdev_buf_size_set)
    __swig_setmethods__["buf_offset"] = _smoothfir.subdev_buf_offset_set
    __swig_getmethods__["buf_offset"] = _smoothfir.subdev_buf_offset_get
    if _newclass:buf_offset = _swig_property(_smoothfir.subdev_buf_offset_get, _smoothfir.subdev_buf_offset_set)
    __swig_setmethods__["buf_left"] = _smoothfir.subdev_buf_left_set
    __swig_getmethods__["buf_left"] = _smoothfir.subdev_buf_left_get
    if _newclass:buf_left = _swig_property(_smoothfir.subdev_buf_left_get, _smoothfir.subdev_buf_left_set)
    __swig_setmethods__["block_size"] = _smoothfir.subdev_block_size_set
    __swig_getmethods__["block_size"] = _smoothfir.subdev_block_size_get
    if _newclass:block_size = _swig_property(_smoothfir.subdev_block_size_get, _smoothfir.subdev_block_size_set)
    __swig_setmethods__["block_size_frames"] = _smoothfir.subdev_block_size_frames_set
    __swig_getmethods__["block_size_frames"] = _smoothfir.subdev_block_size_frames_get
    if _newclass:block_size_frames = _swig_property(_smoothfir.subdev_block_size_frames_get, _smoothfir.subdev_block_size_frames_set)
    __swig_setmethods__["channels"] = _smoothfir.subdev_channels_set
    __swig_getmethods__["channels"] = _smoothfir.subdev_channels_get
    if _newclass:channels = _swig_property(_smoothfir.subdev_channels_get, _smoothfir.subdev_channels_set)
    __swig_setmethods__["db"] = _smoothfir.subdev_db_set
    __swig_getmethods__["db"] = _smoothfir.subdev_db_get
    if _newclass:db = _swig_property(_smoothfir.subdev_db_get, _smoothfir.subdev_db_set)
    def __init__(self): 
        this = _smoothfir.new_subdev()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_subdev
    __del__ = lambda self : None;
subdev_swigregister = _smoothfir.subdev_swigregister
subdev_swigregister(subdev)

class iodev(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iodev, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iodev, name)
    __repr__ = _swig_repr
    __swig_setmethods__["virtual_channels"] = _smoothfir.iodev_virtual_channels_set
    __swig_getmethods__["virtual_channels"] = _smoothfir.iodev_virtual_channels_get
    if _newclass:virtual_channels = _swig_property(_smoothfir.iodev_virtual_channels_get, _smoothfir.iodev_virtual_channels_set)
    __swig_setmethods__["channel_intname"] = _smoothfir.iodev_channel_intname_set
    __swig_getmethods__["channel_intname"] = _smoothfir.iodev_channel_intname_get
    if _newclass:channel_intname = _swig_property(_smoothfir.iodev_channel_intname_get, _smoothfir.iodev_channel_intname_set)
    __swig_setmethods__["channel_name"] = _smoothfir.iodev_channel_name_set
    __swig_getmethods__["channel_name"] = _smoothfir.iodev_channel_name_get
    if _newclass:channel_name = _swig_property(_smoothfir.iodev_channel_name_get, _smoothfir.iodev_channel_name_set)
    __swig_setmethods__["virt2phys"] = _smoothfir.iodev_virt2phys_set
    __swig_getmethods__["virt2phys"] = _smoothfir.iodev_virt2phys_get
    if _newclass:virt2phys = _swig_property(_smoothfir.iodev_virt2phys_get, _smoothfir.iodev_virt2phys_set)
    __swig_setmethods__["ch"] = _smoothfir.iodev_ch_set
    __swig_getmethods__["ch"] = _smoothfir.iodev_ch_get
    if _newclass:ch = _swig_property(_smoothfir.iodev_ch_get, _smoothfir.iodev_ch_set)
    __swig_setmethods__["device_params"] = _smoothfir.iodev_device_params_set
    __swig_getmethods__["device_params"] = _smoothfir.iodev_device_params_get
    if _newclass:device_params = _swig_property(_smoothfir.iodev_device_params_get, _smoothfir.iodev_device_params_set)
    __swig_setmethods__["maxdelay"] = _smoothfir.iodev_maxdelay_set
    __swig_getmethods__["maxdelay"] = _smoothfir.iodev_maxdelay_get
    if _newclass:maxdelay = _swig_property(_smoothfir.iodev_maxdelay_get, _smoothfir.iodev_maxdelay_set)
    __swig_setmethods__["apply_dither"] = _smoothfir.iodev_apply_dither_set
    __swig_getmethods__["apply_dither"] = _smoothfir.iodev_apply_dither_get
    if _newclass:apply_dither = _swig_property(_smoothfir.iodev_apply_dither_get, _smoothfir.iodev_apply_dither_set)
    __swig_setmethods__["auto_format"] = _smoothfir.iodev_auto_format_set
    __swig_getmethods__["auto_format"] = _smoothfir.iodev_auto_format_get
    if _newclass:auto_format = _swig_property(_smoothfir.iodev_auto_format_get, _smoothfir.iodev_auto_format_set)
    def __init__(self): 
        this = _smoothfir.new_iodev()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_iodev
    __del__ = lambda self : None;
iodev_swigregister = _smoothfir.iodev_swigregister
iodev_swigregister(iodev)

class dai_subdevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dai_subdevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dai_subdevice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channels"] = _smoothfir.dai_subdevice_channels_set
    __swig_getmethods__["channels"] = _smoothfir.dai_subdevice_channels_get
    if _newclass:channels = _swig_property(_smoothfir.dai_subdevice_channels_get, _smoothfir.dai_subdevice_channels_set)
    __swig_setmethods__["i_handle"] = _smoothfir.dai_subdevice_i_handle_set
    __swig_getmethods__["i_handle"] = _smoothfir.dai_subdevice_i_handle_get
    if _newclass:i_handle = _swig_property(_smoothfir.dai_subdevice_i_handle_get, _smoothfir.dai_subdevice_i_handle_set)
    __swig_setmethods__["uses_clock"] = _smoothfir.dai_subdevice_uses_clock_set
    __swig_getmethods__["uses_clock"] = _smoothfir.dai_subdevice_uses_clock_get
    if _newclass:uses_clock = _swig_property(_smoothfir.dai_subdevice_uses_clock_get, _smoothfir.dai_subdevice_uses_clock_set)
    __swig_setmethods__["sched_policy"] = _smoothfir.dai_subdevice_sched_policy_set
    __swig_getmethods__["sched_policy"] = _smoothfir.dai_subdevice_sched_policy_get
    if _newclass:sched_policy = _swig_property(_smoothfir.dai_subdevice_sched_policy_get, _smoothfir.dai_subdevice_sched_policy_set)
    __swig_setmethods__["sched_param"] = _smoothfir.dai_subdevice_sched_param_set
    __swig_getmethods__["sched_param"] = _smoothfir.dai_subdevice_sched_param_get
    if _newclass:sched_param = _swig_property(_smoothfir.dai_subdevice_sched_param_get, _smoothfir.dai_subdevice_sched_param_set)
    __swig_setmethods__["module"] = _smoothfir.dai_subdevice_module_set
    __swig_getmethods__["module"] = _smoothfir.dai_subdevice_module_get
    if _newclass:module = _swig_property(_smoothfir.dai_subdevice_module_get, _smoothfir.dai_subdevice_module_set)
    def __init__(self): 
        this = _smoothfir.new_dai_subdevice()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_dai_subdevice
    __del__ = lambda self : None;
dai_subdevice_swigregister = _smoothfir.dai_subdevice_swigregister
dai_subdevice_swigregister(dai_subdevice)

class dai_buffer_format(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dai_buffer_format, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dai_buffer_format, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_bytes"] = _smoothfir.dai_buffer_format_n_bytes_set
    __swig_getmethods__["n_bytes"] = _smoothfir.dai_buffer_format_n_bytes_get
    if _newclass:n_bytes = _swig_property(_smoothfir.dai_buffer_format_n_bytes_get, _smoothfir.dai_buffer_format_n_bytes_set)
    __swig_setmethods__["n_samples"] = _smoothfir.dai_buffer_format_n_samples_set
    __swig_getmethods__["n_samples"] = _smoothfir.dai_buffer_format_n_samples_get
    if _newclass:n_samples = _swig_property(_smoothfir.dai_buffer_format_n_samples_get, _smoothfir.dai_buffer_format_n_samples_set)
    __swig_setmethods__["n_channels"] = _smoothfir.dai_buffer_format_n_channels_set
    __swig_getmethods__["n_channels"] = _smoothfir.dai_buffer_format_n_channels_get
    if _newclass:n_channels = _swig_property(_smoothfir.dai_buffer_format_n_channels_get, _smoothfir.dai_buffer_format_n_channels_set)
    __swig_setmethods__["bf"] = _smoothfir.dai_buffer_format_bf_set
    __swig_getmethods__["bf"] = _smoothfir.dai_buffer_format_bf_get
    if _newclass:bf = _swig_property(_smoothfir.dai_buffer_format_bf_get, _smoothfir.dai_buffer_format_bf_set)
    def __init__(self): 
        this = _smoothfir.new_dai_buffer_format()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_dai_buffer_format
    __del__ = lambda self : None;
dai_buffer_format_swigregister = _smoothfir.dai_buffer_format_swigregister
dai_buffer_format_swigregister(dai_buffer_format)

class sfconf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sfconf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sfconf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cpu_mhz"] = _smoothfir.sfconf_cpu_mhz_set
    __swig_getmethods__["cpu_mhz"] = _smoothfir.sfconf_cpu_mhz_get
    if _newclass:cpu_mhz = _swig_property(_smoothfir.sfconf_cpu_mhz_get, _smoothfir.sfconf_cpu_mhz_set)
    __swig_setmethods__["n_cpus"] = _smoothfir.sfconf_n_cpus_set
    __swig_getmethods__["n_cpus"] = _smoothfir.sfconf_n_cpus_get
    if _newclass:n_cpus = _swig_property(_smoothfir.sfconf_n_cpus_get, _smoothfir.sfconf_n_cpus_set)
    __swig_setmethods__["sampling_rate"] = _smoothfir.sfconf_sampling_rate_set
    __swig_getmethods__["sampling_rate"] = _smoothfir.sfconf_sampling_rate_get
    if _newclass:sampling_rate = _swig_property(_smoothfir.sfconf_sampling_rate_get, _smoothfir.sfconf_sampling_rate_set)
    __swig_setmethods__["filter_length"] = _smoothfir.sfconf_filter_length_set
    __swig_getmethods__["filter_length"] = _smoothfir.sfconf_filter_length_get
    if _newclass:filter_length = _swig_property(_smoothfir.sfconf_filter_length_get, _smoothfir.sfconf_filter_length_set)
    __swig_setmethods__["n_blocks"] = _smoothfir.sfconf_n_blocks_set
    __swig_getmethods__["n_blocks"] = _smoothfir.sfconf_n_blocks_get
    if _newclass:n_blocks = _swig_property(_smoothfir.sfconf_n_blocks_get, _smoothfir.sfconf_n_blocks_set)
    __swig_setmethods__["flowthrough_blocks"] = _smoothfir.sfconf_flowthrough_blocks_set
    __swig_getmethods__["flowthrough_blocks"] = _smoothfir.sfconf_flowthrough_blocks_get
    if _newclass:flowthrough_blocks = _swig_property(_smoothfir.sfconf_flowthrough_blocks_get, _smoothfir.sfconf_flowthrough_blocks_set)
    __swig_setmethods__["realtime_maxprio"] = _smoothfir.sfconf_realtime_maxprio_set
    __swig_getmethods__["realtime_maxprio"] = _smoothfir.sfconf_realtime_maxprio_get
    if _newclass:realtime_maxprio = _swig_property(_smoothfir.sfconf_realtime_maxprio_get, _smoothfir.sfconf_realtime_maxprio_set)
    __swig_setmethods__["realtime_midprio"] = _smoothfir.sfconf_realtime_midprio_set
    __swig_getmethods__["realtime_midprio"] = _smoothfir.sfconf_realtime_midprio_get
    if _newclass:realtime_midprio = _swig_property(_smoothfir.sfconf_realtime_midprio_get, _smoothfir.sfconf_realtime_midprio_set)
    __swig_setmethods__["realtime_usermaxprio"] = _smoothfir.sfconf_realtime_usermaxprio_set
    __swig_getmethods__["realtime_usermaxprio"] = _smoothfir.sfconf_realtime_usermaxprio_get
    if _newclass:realtime_usermaxprio = _swig_property(_smoothfir.sfconf_realtime_usermaxprio_get, _smoothfir.sfconf_realtime_usermaxprio_set)
    __swig_setmethods__["realtime_minprio"] = _smoothfir.sfconf_realtime_minprio_set
    __swig_getmethods__["realtime_minprio"] = _smoothfir.sfconf_realtime_minprio_get
    if _newclass:realtime_minprio = _swig_property(_smoothfir.sfconf_realtime_minprio_get, _smoothfir.sfconf_realtime_minprio_set)
    __swig_setmethods__["realsize"] = _smoothfir.sfconf_realsize_set
    __swig_getmethods__["realsize"] = _smoothfir.sfconf_realsize_get
    if _newclass:realsize = _swig_property(_smoothfir.sfconf_realsize_get, _smoothfir.sfconf_realsize_set)
    __swig_setmethods__["powersave"] = _smoothfir.sfconf_powersave_set
    __swig_getmethods__["powersave"] = _smoothfir.sfconf_powersave_get
    if _newclass:powersave = _swig_property(_smoothfir.sfconf_powersave_get, _smoothfir.sfconf_powersave_set)
    __swig_setmethods__["analog_powersave"] = _smoothfir.sfconf_analog_powersave_set
    __swig_getmethods__["analog_powersave"] = _smoothfir.sfconf_analog_powersave_get
    if _newclass:analog_powersave = _swig_property(_smoothfir.sfconf_analog_powersave_get, _smoothfir.sfconf_analog_powersave_set)
    __swig_setmethods__["overflow_control"] = _smoothfir.sfconf_overflow_control_set
    __swig_getmethods__["overflow_control"] = _smoothfir.sfconf_overflow_control_get
    if _newclass:overflow_control = _swig_property(_smoothfir.sfconf_overflow_control_get, _smoothfir.sfconf_overflow_control_set)
    __swig_setmethods__["benchmark"] = _smoothfir.sfconf_benchmark_set
    __swig_getmethods__["benchmark"] = _smoothfir.sfconf_benchmark_get
    if _newclass:benchmark = _swig_property(_smoothfir.sfconf_benchmark_get, _smoothfir.sfconf_benchmark_set)
    __swig_setmethods__["debug"] = _smoothfir.sfconf_debug_set
    __swig_getmethods__["debug"] = _smoothfir.sfconf_debug_get
    if _newclass:debug = _swig_property(_smoothfir.sfconf_debug_get, _smoothfir.sfconf_debug_set)
    __swig_setmethods__["quiet"] = _smoothfir.sfconf_quiet_set
    __swig_getmethods__["quiet"] = _smoothfir.sfconf_quiet_get
    if _newclass:quiet = _swig_property(_smoothfir.sfconf_quiet_get, _smoothfir.sfconf_quiet_set)
    __swig_setmethods__["overflow_warnings"] = _smoothfir.sfconf_overflow_warnings_set
    __swig_getmethods__["overflow_warnings"] = _smoothfir.sfconf_overflow_warnings_get
    if _newclass:overflow_warnings = _swig_property(_smoothfir.sfconf_overflow_warnings_get, _smoothfir.sfconf_overflow_warnings_set)
    __swig_setmethods__["show_progress"] = _smoothfir.sfconf_show_progress_set
    __swig_getmethods__["show_progress"] = _smoothfir.sfconf_show_progress_get
    if _newclass:show_progress = _swig_property(_smoothfir.sfconf_show_progress_get, _smoothfir.sfconf_show_progress_set)
    __swig_setmethods__["realtime_priority"] = _smoothfir.sfconf_realtime_priority_set
    __swig_getmethods__["realtime_priority"] = _smoothfir.sfconf_realtime_priority_get
    if _newclass:realtime_priority = _swig_property(_smoothfir.sfconf_realtime_priority_get, _smoothfir.sfconf_realtime_priority_set)
    __swig_setmethods__["lock_memory"] = _smoothfir.sfconf_lock_memory_set
    __swig_getmethods__["lock_memory"] = _smoothfir.sfconf_lock_memory_get
    if _newclass:lock_memory = _swig_property(_smoothfir.sfconf_lock_memory_get, _smoothfir.sfconf_lock_memory_set)
    __swig_setmethods__["synched_write"] = _smoothfir.sfconf_synched_write_set
    __swig_getmethods__["synched_write"] = _smoothfir.sfconf_synched_write_get
    if _newclass:synched_write = _swig_property(_smoothfir.sfconf_synched_write_get, _smoothfir.sfconf_synched_write_set)
    __swig_setmethods__["allow_poll_mode"] = _smoothfir.sfconf_allow_poll_mode_set
    __swig_getmethods__["allow_poll_mode"] = _smoothfir.sfconf_allow_poll_mode_get
    if _newclass:allow_poll_mode = _swig_property(_smoothfir.sfconf_allow_poll_mode_get, _smoothfir.sfconf_allow_poll_mode_set)
    __swig_setmethods__["dither_state"] = _smoothfir.sfconf_dither_state_set
    __swig_getmethods__["dither_state"] = _smoothfir.sfconf_dither_state_get
    if _newclass:dither_state = _swig_property(_smoothfir.sfconf_dither_state_get, _smoothfir.sfconf_dither_state_set)
    __swig_setmethods__["n_coeffs"] = _smoothfir.sfconf_n_coeffs_set
    __swig_getmethods__["n_coeffs"] = _smoothfir.sfconf_n_coeffs_get
    if _newclass:n_coeffs = _swig_property(_smoothfir.sfconf_n_coeffs_get, _smoothfir.sfconf_n_coeffs_set)
    __swig_setmethods__["coeffs"] = _smoothfir.sfconf_coeffs_set
    __swig_getmethods__["coeffs"] = _smoothfir.sfconf_coeffs_get
    if _newclass:coeffs = _swig_property(_smoothfir.sfconf_coeffs_get, _smoothfir.sfconf_coeffs_set)
    __swig_setmethods__["coeffs_data"] = _smoothfir.sfconf_coeffs_data_set
    __swig_getmethods__["coeffs_data"] = _smoothfir.sfconf_coeffs_data_get
    if _newclass:coeffs_data = _swig_property(_smoothfir.sfconf_coeffs_data_get, _smoothfir.sfconf_coeffs_data_set)
    __swig_setmethods__["n_channels"] = _smoothfir.sfconf_n_channels_set
    __swig_getmethods__["n_channels"] = _smoothfir.sfconf_n_channels_get
    if _newclass:n_channels = _swig_property(_smoothfir.sfconf_n_channels_get, _smoothfir.sfconf_n_channels_set)
    __swig_setmethods__["channels"] = _smoothfir.sfconf_channels_set
    __swig_getmethods__["channels"] = _smoothfir.sfconf_channels_get
    if _newclass:channels = _swig_property(_smoothfir.sfconf_channels_get, _smoothfir.sfconf_channels_set)
    __swig_setmethods__["n_physical_channels"] = _smoothfir.sfconf_n_physical_channels_set
    __swig_getmethods__["n_physical_channels"] = _smoothfir.sfconf_n_physical_channels_get
    if _newclass:n_physical_channels = _swig_property(_smoothfir.sfconf_n_physical_channels_get, _smoothfir.sfconf_n_physical_channels_set)
    __swig_setmethods__["n_virtperphys"] = _smoothfir.sfconf_n_virtperphys_set
    __swig_getmethods__["n_virtperphys"] = _smoothfir.sfconf_n_virtperphys_get
    if _newclass:n_virtperphys = _swig_property(_smoothfir.sfconf_n_virtperphys_get, _smoothfir.sfconf_n_virtperphys_set)
    __swig_setmethods__["phys2virt"] = _smoothfir.sfconf_phys2virt_set
    __swig_getmethods__["phys2virt"] = _smoothfir.sfconf_phys2virt_get
    if _newclass:phys2virt = _swig_property(_smoothfir.sfconf_phys2virt_get, _smoothfir.sfconf_phys2virt_set)
    __swig_setmethods__["virt2phys"] = _smoothfir.sfconf_virt2phys_set
    __swig_getmethods__["virt2phys"] = _smoothfir.sfconf_virt2phys_get
    if _newclass:virt2phys = _swig_property(_smoothfir.sfconf_virt2phys_get, _smoothfir.sfconf_virt2phys_set)
    __swig_setmethods__["subdevs"] = _smoothfir.sfconf_subdevs_set
    __swig_getmethods__["subdevs"] = _smoothfir.sfconf_subdevs_get
    if _newclass:subdevs = _swig_property(_smoothfir.sfconf_subdevs_get, _smoothfir.sfconf_subdevs_set)
    __swig_setmethods__["delay"] = _smoothfir.sfconf_delay_set
    __swig_getmethods__["delay"] = _smoothfir.sfconf_delay_get
    if _newclass:delay = _swig_property(_smoothfir.sfconf_delay_get, _smoothfir.sfconf_delay_set)
    __swig_setmethods__["maxdelay"] = _smoothfir.sfconf_maxdelay_set
    __swig_getmethods__["maxdelay"] = _smoothfir.sfconf_maxdelay_get
    if _newclass:maxdelay = _swig_property(_smoothfir.sfconf_maxdelay_get, _smoothfir.sfconf_maxdelay_set)
    __swig_setmethods__["mute"] = _smoothfir.sfconf_mute_set
    __swig_getmethods__["mute"] = _smoothfir.sfconf_mute_get
    if _newclass:mute = _swig_property(_smoothfir.sfconf_mute_get, _smoothfir.sfconf_mute_set)
    __swig_setmethods__["n_filters"] = _smoothfir.sfconf_n_filters_set
    __swig_getmethods__["n_filters"] = _smoothfir.sfconf_n_filters_get
    if _newclass:n_filters = _swig_property(_smoothfir.sfconf_n_filters_get, _smoothfir.sfconf_n_filters_set)
    __swig_setmethods__["filters"] = _smoothfir.sfconf_filters_set
    __swig_getmethods__["filters"] = _smoothfir.sfconf_filters_get
    if _newclass:filters = _swig_property(_smoothfir.sfconf_filters_get, _smoothfir.sfconf_filters_set)
    __swig_setmethods__["initfctrl"] = _smoothfir.sfconf_initfctrl_set
    __swig_getmethods__["initfctrl"] = _smoothfir.sfconf_initfctrl_get
    if _newclass:initfctrl = _swig_property(_smoothfir.sfconf_initfctrl_get, _smoothfir.sfconf_initfctrl_set)
    __swig_setmethods__["fproc"] = _smoothfir.sfconf_fproc_set
    __swig_getmethods__["fproc"] = _smoothfir.sfconf_fproc_get
    if _newclass:fproc = _swig_property(_smoothfir.sfconf_fproc_get, _smoothfir.sfconf_fproc_set)
    __swig_setmethods__["io"] = _smoothfir.sfconf_io_set
    __swig_getmethods__["io"] = _smoothfir.sfconf_io_get
    if _newclass:io = _swig_property(_smoothfir.sfconf_io_get, _smoothfir.sfconf_io_set)
    __swig_setmethods__["n_logicmods"] = _smoothfir.sfconf_n_logicmods_set
    __swig_getmethods__["n_logicmods"] = _smoothfir.sfconf_n_logicmods_get
    if _newclass:n_logicmods = _swig_property(_smoothfir.sfconf_n_logicmods_get, _smoothfir.sfconf_n_logicmods_set)
    __swig_setmethods__["logicnames"] = _smoothfir.sfconf_logicnames_set
    __swig_getmethods__["logicnames"] = _smoothfir.sfconf_logicnames_get
    if _newclass:logicnames = _swig_property(_smoothfir.sfconf_logicnames_get, _smoothfir.sfconf_logicnames_set)
    def __init__(self): 
        this = _smoothfir.new_sfconf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_sfconf
    __del__ = lambda self : None;
sfconf_swigregister = _smoothfir.sfconf_swigregister
sfconf_swigregister(sfconf)

class apply_subdelay_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, apply_subdelay_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, apply_subdelay_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["subdelay"] = _smoothfir.apply_subdelay_params_subdelay_set
    __swig_getmethods__["subdelay"] = _smoothfir.apply_subdelay_params_subdelay_get
    if _newclass:subdelay = _swig_property(_smoothfir.apply_subdelay_params_subdelay_get, _smoothfir.apply_subdelay_params_subdelay_set)
    __swig_setmethods__["rest"] = _smoothfir.apply_subdelay_params_rest_set
    __swig_getmethods__["rest"] = _smoothfir.apply_subdelay_params_rest_get
    if _newclass:rest = _swig_property(_smoothfir.apply_subdelay_params_rest_get, _smoothfir.apply_subdelay_params_rest_set)
    def __init__(self): 
        this = _smoothfir.new_apply_subdelay_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_apply_subdelay_params
    __del__ = lambda self : None;
apply_subdelay_params_swigregister = _smoothfir.apply_subdelay_params_swigregister
apply_subdelay_params_swigregister(apply_subdelay_params)

class coeff(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coeff, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coeff, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["coeff"] = _smoothfir.coeff_coeff_set
    __swig_getmethods__["coeff"] = _smoothfir.coeff_coeff_get
    if _newclass:coeff = _swig_property(_smoothfir.coeff_coeff_get, _smoothfir.coeff_coeff_set)
    __swig_setmethods__["format"] = _smoothfir.coeff_format_set
    __swig_getmethods__["format"] = _smoothfir.coeff_format_get
    if _newclass:format = _swig_property(_smoothfir.coeff_format_get, _smoothfir.coeff_format_set)
    __swig_setmethods__["skip"] = _smoothfir.coeff_skip_set
    __swig_getmethods__["skip"] = _smoothfir.coeff_skip_get
    if _newclass:skip = _swig_property(_smoothfir.coeff_skip_get, _smoothfir.coeff_skip_set)
    __swig_setmethods__["channel"] = _smoothfir.coeff_channel_set
    __swig_getmethods__["channel"] = _smoothfir.coeff_channel_get
    if _newclass:channel = _swig_property(_smoothfir.coeff_channel_get, _smoothfir.coeff_channel_set)
    __swig_setmethods__["sfinfo"] = _smoothfir.coeff_sfinfo_set
    __swig_getmethods__["sfinfo"] = _smoothfir.coeff_sfinfo_get
    if _newclass:sfinfo = _swig_property(_smoothfir.coeff_sfinfo_get, _smoothfir.coeff_sfinfo_set)
    __swig_setmethods__["filename"] = _smoothfir.coeff_filename_set
    __swig_getmethods__["filename"] = _smoothfir.coeff_filename_get
    if _newclass:filename = _swig_property(_smoothfir.coeff_filename_get, _smoothfir.coeff_filename_set)
    __swig_setmethods__["shm_shmids"] = _smoothfir.coeff_shm_shmids_set
    __swig_getmethods__["shm_shmids"] = _smoothfir.coeff_shm_shmids_get
    if _newclass:shm_shmids = _swig_property(_smoothfir.coeff_shm_shmids_get, _smoothfir.coeff_shm_shmids_set)
    __swig_setmethods__["shm_offsets"] = _smoothfir.coeff_shm_offsets_set
    __swig_getmethods__["shm_offsets"] = _smoothfir.coeff_shm_offsets_get
    if _newclass:shm_offsets = _swig_property(_smoothfir.coeff_shm_offsets_get, _smoothfir.coeff_shm_offsets_set)
    __swig_setmethods__["shm_blocks"] = _smoothfir.coeff_shm_blocks_set
    __swig_getmethods__["shm_blocks"] = _smoothfir.coeff_shm_blocks_get
    if _newclass:shm_blocks = _swig_property(_smoothfir.coeff_shm_blocks_get, _smoothfir.coeff_shm_blocks_set)
    __swig_setmethods__["shm_elements"] = _smoothfir.coeff_shm_elements_set
    __swig_getmethods__["shm_elements"] = _smoothfir.coeff_shm_elements_get
    if _newclass:shm_elements = _swig_property(_smoothfir.coeff_shm_elements_get, _smoothfir.coeff_shm_elements_set)
    __swig_setmethods__["scale"] = _smoothfir.coeff_scale_set
    __swig_getmethods__["scale"] = _smoothfir.coeff_scale_get
    if _newclass:scale = _swig_property(_smoothfir.coeff_scale_get, _smoothfir.coeff_scale_set)
    __swig_destroy__ = _smoothfir.delete_coeff
    __del__ = lambda self : None;
coeff_swigregister = _smoothfir.coeff_swigregister
coeff_swigregister(coeff)
COEFF_FORMAT_RAW = _smoothfir.COEFF_FORMAT_RAW
COEFF_FORMAT_SNDFILE = _smoothfir.COEFF_FORMAT_SNDFILE
COEFF_FORMAT_TEXT = _smoothfir.COEFF_FORMAT_TEXT

class filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, filter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filter"] = _smoothfir.filter_filter_set
    __swig_getmethods__["filter"] = _smoothfir.filter_filter_get
    if _newclass:filter = _swig_property(_smoothfir.filter_filter_get, _smoothfir.filter_filter_set)
    __swig_setmethods__["fctrl"] = _smoothfir.filter_fctrl_set
    __swig_getmethods__["fctrl"] = _smoothfir.filter_fctrl_get
    if _newclass:fctrl = _swig_property(_smoothfir.filter_fctrl_get, _smoothfir.filter_fctrl_set)
    __swig_setmethods__["coeff_name"] = _smoothfir.filter_coeff_name_set
    __swig_getmethods__["coeff_name"] = _smoothfir.filter_coeff_name_get
    if _newclass:coeff_name = _swig_property(_smoothfir.filter_coeff_name_get, _smoothfir.filter_coeff_name_set)
    __swig_setmethods__["channel_name"] = _smoothfir.filter_channel_name_set
    __swig_getmethods__["channel_name"] = _smoothfir.filter_channel_name_get
    if _newclass:channel_name = _swig_property(_smoothfir.filter_channel_name_get, _smoothfir.filter_channel_name_set)
    __swig_setmethods__["filter_name"] = _smoothfir.filter_filter_name_set
    __swig_getmethods__["filter_name"] = _smoothfir.filter_filter_name_get
    if _newclass:filter_name = _swig_property(_smoothfir.filter_filter_name_get, _smoothfir.filter_filter_name_set)
    __swig_setmethods__["process"] = _smoothfir.filter_process_set
    __swig_getmethods__["process"] = _smoothfir.filter_process_get
    if _newclass:process = _swig_property(_smoothfir.filter_process_get, _smoothfir.filter_process_set)
    __swig_destroy__ = _smoothfir.delete_filter
    __del__ = lambda self : None;
filter_swigregister = _smoothfir.filter_swigregister
filter_swigregister(filter)


def parse_error(*args):
  return _smoothfir.parse_error(*args)
parse_error = _smoothfir.parse_error

def parse_error_exit(*args):
  return _smoothfir.parse_error_exit(*args)
parse_error_exit = _smoothfir.parse_error_exit

def tilde_expansion(*args):
  return _smoothfir.tilde_expansion(*args)
tilde_expansion = _smoothfir.tilde_expansion

def parse_sample_format(*args):
  return _smoothfir.parse_sample_format(*args)
parse_sample_format = _smoothfir.parse_sample_format

def parse_coeff_sample_format(*args):
  return _smoothfir.parse_coeff_sample_format(*args)
parse_coeff_sample_format = _smoothfir.parse_coeff_sample_format

def real_read(*args):
  return _smoothfir.real_read(*args)
real_read = _smoothfir.real_read

def sndfile_read(*args):
  return _smoothfir.sndfile_read(*args)
sndfile_read = _smoothfir.sndfile_read

def number_of_cpus():
  return _smoothfir.number_of_cpus()
number_of_cpus = _smoothfir.number_of_cpus
class SfConf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SfConf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SfConf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _smoothfir.new_SfConf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_SfConf
    __del__ = lambda self : None;
    __swig_setmethods__["quiet"] = _smoothfir.SfConf_quiet_set
    __swig_getmethods__["quiet"] = _smoothfir.SfConf_quiet_get
    if _newclass:quiet = _swig_property(_smoothfir.SfConf_quiet_get, _smoothfir.SfConf_quiet_set)
    __swig_setmethods__["dither_state"] = _smoothfir.SfConf_dither_state_set
    __swig_getmethods__["dither_state"] = _smoothfir.SfConf_dither_state_get
    if _newclass:dither_state = _swig_property(_smoothfir.SfConf_dither_state_get, _smoothfir.SfConf_dither_state_set)
    __swig_setmethods__["coeffs_data"] = _smoothfir.SfConf_coeffs_data_set
    __swig_getmethods__["coeffs_data"] = _smoothfir.SfConf_coeffs_data_get
    if _newclass:coeffs_data = _swig_property(_smoothfir.SfConf_coeffs_data_get, _smoothfir.SfConf_coeffs_data_set)
    __swig_setmethods__["n_channels"] = _smoothfir.SfConf_n_channels_set
    __swig_getmethods__["n_channels"] = _smoothfir.SfConf_n_channels_get
    if _newclass:n_channels = _swig_property(_smoothfir.SfConf_n_channels_get, _smoothfir.SfConf_n_channels_set)
    __swig_setmethods__["maxdelay"] = _smoothfir.SfConf_maxdelay_set
    __swig_getmethods__["maxdelay"] = _smoothfir.SfConf_maxdelay_get
    if _newclass:maxdelay = _swig_property(_smoothfir.SfConf_maxdelay_get, _smoothfir.SfConf_maxdelay_set)
    __swig_setmethods__["filters"] = _smoothfir.SfConf_filters_set
    __swig_getmethods__["filters"] = _smoothfir.SfConf_filters_get
    if _newclass:filters = _swig_property(_smoothfir.SfConf_filters_get, _smoothfir.SfConf_filters_set)
    __swig_setmethods__["sfconf"] = _smoothfir.SfConf_sfconf_set
    __swig_getmethods__["sfconf"] = _smoothfir.SfConf_sfconf_get
    if _newclass:sfconf = _swig_property(_smoothfir.SfConf_sfconf_get, _smoothfir.SfConf_sfconf_set)
    __swig_setmethods__["icomm"] = _smoothfir.SfConf_icomm_set
    __swig_getmethods__["icomm"] = _smoothfir.SfConf_icomm_get
    if _newclass:icomm = _swig_property(_smoothfir.SfConf_icomm_get, _smoothfir.SfConf_icomm_set)
    __swig_setmethods__["sfConv"] = _smoothfir.SfConf_sfConv_set
    __swig_getmethods__["sfConv"] = _smoothfir.SfConf_sfConv_get
    if _newclass:sfConv = _swig_property(_smoothfir.SfConf_sfConv_get, _smoothfir.SfConf_sfConv_set)
    __swig_setmethods__["sfDai"] = _smoothfir.SfConf_sfDai_set
    __swig_getmethods__["sfDai"] = _smoothfir.SfConf_sfDai_get
    if _newclass:sfDai = _swig_property(_smoothfir.SfConf_sfDai_get, _smoothfir.SfConf_sfDai_set)
    __swig_setmethods__["sfDelay"] = _smoothfir.SfConf_sfDelay_set
    __swig_getmethods__["sfDelay"] = _smoothfir.SfConf_sfDelay_get
    if _newclass:sfDelay = _swig_property(_smoothfir.SfConf_sfDelay_get, _smoothfir.SfConf_sfDelay_set)
    __swig_setmethods__["sfRun"] = _smoothfir.SfConf_sfRun_set
    __swig_getmethods__["sfRun"] = _smoothfir.SfConf_sfRun_get
    if _newclass:sfRun = _swig_property(_smoothfir.SfConf_sfRun_get, _smoothfir.SfConf_sfRun_set)
    __swig_setmethods__["iojack"] = _smoothfir.SfConf_iojack_set
    __swig_getmethods__["iojack"] = _smoothfir.SfConf_iojack_get
    if _newclass:iojack = _swig_property(_smoothfir.SfConf_iojack_get, _smoothfir.SfConf_iojack_set)
    __swig_setmethods__["sflogic"] = _smoothfir.SfConf_sflogic_set
    __swig_getmethods__["sflogic"] = _smoothfir.SfConf_sflogic_get
    if _newclass:sflogic = _swig_property(_smoothfir.SfConf_sflogic_get, _smoothfir.SfConf_sflogic_set)
    def sfconf_init(self, *args): return _smoothfir.SfConf_sfconf_init(self, *args)
    def add_sflogic(self, *args): return _smoothfir.SfConf_add_sflogic(self, *args)
SfConf_swigregister = _smoothfir.SfConf_swigregister
SfConf_swigregister(SfConf)

FILTER_ID = _smoothfir.FILTER_ID
INPUT_ID = _smoothfir.INPUT_ID
OUTPUT_ID = _smoothfir.OUTPUT_ID
COEFF_ID = _smoothfir.COEFF_ID
class SFLOGIC_PY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFLOGIC_PY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFLOGIC_PY, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _smoothfir.new_SFLOGIC_PY(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_PY
    __del__ = lambda self : None;
    def preinit(self, *args): return _smoothfir.SFLOGIC_PY_preinit(self, *args)
    def init(self, *args): return _smoothfir.SFLOGIC_PY_init(self, *args)
    def getCoeffData(self): return _smoothfir.SFLOGIC_PY_getCoeffData(self)
    def getFilterData(self): return _smoothfir.SFLOGIC_PY_getFilterData(self)
    def getFilterControl(self, *args): return _smoothfir.SFLOGIC_PY_getFilterControl(self, *args)
    def getChannels(self, *args): return _smoothfir.SFLOGIC_PY_getChannels(self, *args)
    def is_running(self): return _smoothfir.SFLOGIC_PY_is_running(self)
    def getFilternChannels(self, *args): return _smoothfir.SFLOGIC_PY_getFilternChannels(self, *args)
    def getFilternFilters(self, *args): return _smoothfir.SFLOGIC_PY_getFilternFilters(self, *args)
    def getFilterCoeff(self, *args): return _smoothfir.SFLOGIC_PY_getFilterCoeff(self, *args)
    def getFilterChannels(self, *args): return _smoothfir.SFLOGIC_PY_getFilterChannels(self, *args)
    def getFilterFilters(self, *args): return _smoothfir.SFLOGIC_PY_getFilterFilters(self, *args)
    def connect_port(self, *args): return _smoothfir.SFLOGIC_PY_connect_port(self, *args)
    def disconnect_port(self, *args): return _smoothfir.SFLOGIC_PY_disconnect_port(self, *args)
    def get_jack_port_connections(self, *args): return _smoothfir.SFLOGIC_PY_get_jack_port_connections(self, *args)
    def get_jack_ports(self): return _smoothfir.SFLOGIC_PY_get_jack_ports(self)
    def get_jack_input_physical_ports(self): return _smoothfir.SFLOGIC_PY_get_jack_input_physical_ports(self)
    def get_jack_input_ports(self): return _smoothfir.SFLOGIC_PY_get_jack_input_ports(self)
    def get_jack_output_physical_ports(self): return _smoothfir.SFLOGIC_PY_get_jack_output_physical_ports(self)
    def get_jack_output_ports(self): return _smoothfir.SFLOGIC_PY_get_jack_output_ports(self)
    def change_input_attenuation(self, *args): return _smoothfir.SFLOGIC_PY_change_input_attenuation(self, *args)
    def get_input_attenuation(self, *args): return _smoothfir.SFLOGIC_PY_get_input_attenuation(self, *args)
    def change_output_attenuation(self, *args): return _smoothfir.SFLOGIC_PY_change_output_attenuation(self, *args)
    def change_filter_coeff(self, *args): return _smoothfir.SFLOGIC_PY_change_filter_coeff(self, *args)
    def change_filter_attenuation(self, *args): return _smoothfir.SFLOGIC_PY_change_filter_attenuation(self, *args)
    def get_filter_attenuation(self, *args): return _smoothfir.SFLOGIC_PY_get_filter_attenuation(self, *args)
    def change_filter_filter_attenuation(self, *args): return _smoothfir.SFLOGIC_PY_change_filter_filter_attenuation(self, *args)
    def toggle_mute(self, *args): return _smoothfir.SFLOGIC_PY_toggle_mute(self, *args)
    def get_inpeaks(self): return _smoothfir.SFLOGIC_PY_get_inpeaks(self)
    def get_outpeaks(self): return _smoothfir.SFLOGIC_PY_get_outpeaks(self)
    def reset_peaks(self): return _smoothfir.SFLOGIC_PY_reset_peaks(self)
SFLOGIC_PY_swigregister = _smoothfir.SFLOGIC_PY_swigregister
SFLOGIC_PY_swigregister(SFLOGIC_PY)

class SndFileManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndFileManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SndFileManager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mutex"] = _smoothfir.SndFileManager_mutex_set
    __swig_getmethods__["mutex"] = _smoothfir.SndFileManager_mutex_get
    if _newclass:mutex = _swig_property(_smoothfir.SndFileManager_mutex_get, _smoothfir.SndFileManager_mutex_set)
    def __init__(self, *args): 
        this = _smoothfir.new_SndFileManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_SndFileManager
    __del__ = lambda self : None;
    def preinit(self, *args): return _smoothfir.SndFileManager_preinit(self, *args)
    def init(self): return _smoothfir.SndFileManager_init(self)
    def config(self, *args): return _smoothfir.SndFileManager_config(self, *args)
    def start(self, *args): return _smoothfir.SndFileManager_start(self, *args)
    def stop(self): return _smoothfir.SndFileManager_stop(self)
    def openFilename(self): return _smoothfir.SndFileManager_openFilename(self)
    def closeFilename(self): return _smoothfir.SndFileManager_closeFilename(self)
    def input_timed(self, *args): return _smoothfir.SndFileManager_input_timed(self, *args)
    def output_timed(self, *args): return _smoothfir.SndFileManager_output_timed(self, *args)
SndFileManager_swigregister = _smoothfir.SndFileManager_swigregister
SndFileManager_swigregister(SndFileManager)

class SFLOGIC_RECPLAY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFLOGIC_RECPLAY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFLOGIC_RECPLAY, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _smoothfir.new_SFLOGIC_RECPLAY(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_RECPLAY
    __del__ = lambda self : None;
    def preinit(self, *args): return _smoothfir.SFLOGIC_RECPLAY_preinit(self, *args)
    def addManager(self, *args): return _smoothfir.SFLOGIC_RECPLAY_addManager(self, *args)
    def init(self, *args): return _smoothfir.SFLOGIC_RECPLAY_init(self, *args)
    def command(self, *args): return _smoothfir.SFLOGIC_RECPLAY_command(self, *args)
    def message(self): return _smoothfir.SFLOGIC_RECPLAY_message(self)
    def input_timed(self, *args): return _smoothfir.SFLOGIC_RECPLAY_input_timed(self, *args)
    def output_timed(self, *args): return _smoothfir.SFLOGIC_RECPLAY_output_timed(self, *args)
SFLOGIC_RECPLAY_swigregister = _smoothfir.SFLOGIC_RECPLAY_swigregister
SFLOGIC_RECPLAY_swigregister(SFLOGIC_RECPLAY)

LADSPA_CONTROLS_MAX = _smoothfir.LADSPA_CONTROLS_MAX
LADSPA_OUTPUT_MAX = _smoothfir.LADSPA_OUTPUT_MAX

def field_repeat_test(*args):
  return _smoothfir.field_repeat_test(*args)
field_repeat_test = _smoothfir.field_repeat_test

def field_mandatory_test(*args):
  return _smoothfir.field_mandatory_test(*args)
field_mandatory_test = _smoothfir.field_mandatory_test
class LADSPA_Control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LADSPA_Control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LADSPA_Control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _smoothfir.LADSPA_Control_index_set
    __swig_getmethods__["index"] = _smoothfir.LADSPA_Control_index_get
    if _newclass:index = _swig_property(_smoothfir.LADSPA_Control_index_get, _smoothfir.LADSPA_Control_index_set)
    __swig_setmethods__["control_label"] = _smoothfir.LADSPA_Control_control_label_set
    __swig_getmethods__["control_label"] = _smoothfir.LADSPA_Control_control_label_get
    if _newclass:control_label = _swig_property(_smoothfir.LADSPA_Control_control_label_get, _smoothfir.LADSPA_Control_control_label_set)
    __swig_setmethods__["control_value"] = _smoothfir.LADSPA_Control_control_value_set
    __swig_getmethods__["control_value"] = _smoothfir.LADSPA_Control_control_value_get
    if _newclass:control_value = _swig_property(_smoothfir.LADSPA_Control_control_value_get, _smoothfir.LADSPA_Control_control_value_set)
    def __init__(self): 
        this = _smoothfir.new_LADSPA_Control()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_LADSPA_Control
    __del__ = lambda self : None;
LADSPA_Control_swigregister = _smoothfir.LADSPA_Control_swigregister
LADSPA_Control_swigregister(LADSPA_Control)

class LADSPA_PLUGIN(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LADSPA_PLUGIN, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LADSPA_PLUGIN, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mutex"] = _smoothfir.LADSPA_PLUGIN_mutex_set
    __swig_getmethods__["mutex"] = _smoothfir.LADSPA_PLUGIN_mutex_get
    if _newclass:mutex = _swig_property(_smoothfir.LADSPA_PLUGIN_mutex_get, _smoothfir.LADSPA_PLUGIN_mutex_set)
    def __init__(self, *args): 
        this = _smoothfir.new_LADSPA_PLUGIN(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_LADSPA_PLUGIN
    __del__ = lambda self : None;
    def preinit(self, *args): return _smoothfir.LADSPA_PLUGIN_preinit(self, *args)
    def init(self): return _smoothfir.LADSPA_PLUGIN_init(self)
    def setLabel(self, *args): return _smoothfir.LADSPA_PLUGIN_setLabel(self, *args)
    def setInput(self, *args): return _smoothfir.LADSPA_PLUGIN_setInput(self, *args)
    def addOutput(self, *args): return _smoothfir.LADSPA_PLUGIN_addOutput(self, *args)
    def setPortValue(self, *args): return _smoothfir.LADSPA_PLUGIN_setPortValue(self, *args)
    def input_timed(self, *args): return _smoothfir.LADSPA_PLUGIN_input_timed(self, *args)
    def output_timed(self, *args): return _smoothfir.LADSPA_PLUGIN_output_timed(self, *args)
LADSPA_PLUGIN_swigregister = _smoothfir.LADSPA_PLUGIN_swigregister
LADSPA_PLUGIN_swigregister(LADSPA_PLUGIN)

class SFLOGIC_LADSPA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFLOGIC_LADSPA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFLOGIC_LADSPA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["plugins"] = _smoothfir.SFLOGIC_LADSPA_plugins_set
    __swig_getmethods__["plugins"] = _smoothfir.SFLOGIC_LADSPA_plugins_get
    if _newclass:plugins = _swig_property(_smoothfir.SFLOGIC_LADSPA_plugins_get, _smoothfir.SFLOGIC_LADSPA_plugins_set)
    def __init__(self, *args): 
        this = _smoothfir.new_SFLOGIC_LADSPA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_LADSPA
    __del__ = lambda self : None;
    def preinit(self, *args): return _smoothfir.SFLOGIC_LADSPA_preinit(self, *args)
    def init(self, *args): return _smoothfir.SFLOGIC_LADSPA_init(self, *args)
    def addPlugin(self, *args): return _smoothfir.SFLOGIC_LADSPA_addPlugin(self, *args)
    def input_timed(self, *args): return _smoothfir.SFLOGIC_LADSPA_input_timed(self, *args)
    def output_timed(self, *args): return _smoothfir.SFLOGIC_LADSPA_output_timed(self, *args)
SFLOGIC_LADSPA_swigregister = _smoothfir.SFLOGIC_LADSPA_swigregister
SFLOGIC_LADSPA_swigregister(SFLOGIC_LADSPA)

PcmInt16Bit = _smoothfir.PcmInt16Bit
PcmFloat32Bit = _smoothfir.PcmFloat32Bit
PcmFloat64Bit = _smoothfir.PcmFloat64Bit
class realtime_RACE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, realtime_RACE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, realtime_RACE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ifftplan"] = _smoothfir.realtime_RACE_ifftplan_set
    __swig_getmethods__["ifftplan"] = _smoothfir.realtime_RACE_ifftplan_get
    if _newclass:ifftplan = _swig_property(_smoothfir.realtime_RACE_ifftplan_get, _smoothfir.realtime_RACE_ifftplan_set)
    __swig_setmethods__["band_count"] = _smoothfir.realtime_RACE_band_count_set
    __swig_getmethods__["band_count"] = _smoothfir.realtime_RACE_band_count_get
    if _newclass:band_count = _swig_property(_smoothfir.realtime_RACE_band_count_get, _smoothfir.realtime_RACE_band_count_set)
    __swig_setmethods__["taps"] = _smoothfir.realtime_RACE_taps_set
    __swig_getmethods__["taps"] = _smoothfir.realtime_RACE_taps_get
    if _newclass:taps = _swig_property(_smoothfir.realtime_RACE_taps_get, _smoothfir.realtime_RACE_taps_set)
    __swig_setmethods__["direct_coeff"] = _smoothfir.realtime_RACE_direct_coeff_set
    __swig_getmethods__["direct_coeff"] = _smoothfir.realtime_RACE_direct_coeff_get
    if _newclass:direct_coeff = _swig_property(_smoothfir.realtime_RACE_direct_coeff_get, _smoothfir.realtime_RACE_direct_coeff_set)
    __swig_setmethods__["cross_coeff"] = _smoothfir.realtime_RACE_cross_coeff_set
    __swig_getmethods__["cross_coeff"] = _smoothfir.realtime_RACE_cross_coeff_get
    if _newclass:cross_coeff = _swig_property(_smoothfir.realtime_RACE_cross_coeff_get, _smoothfir.realtime_RACE_cross_coeff_set)
    __swig_setmethods__["active_coeff"] = _smoothfir.realtime_RACE_active_coeff_set
    __swig_getmethods__["active_coeff"] = _smoothfir.realtime_RACE_active_coeff_get
    if _newclass:active_coeff = _swig_property(_smoothfir.realtime_RACE_active_coeff_get, _smoothfir.realtime_RACE_active_coeff_set)
    __swig_setmethods__["not_changed"] = _smoothfir.realtime_RACE_not_changed_set
    __swig_getmethods__["not_changed"] = _smoothfir.realtime_RACE_not_changed_get
    if _newclass:not_changed = _swig_property(_smoothfir.realtime_RACE_not_changed_get, _smoothfir.realtime_RACE_not_changed_set)
    __swig_setmethods__["freq"] = _smoothfir.realtime_RACE_freq_set
    __swig_getmethods__["freq"] = _smoothfir.realtime_RACE_freq_get
    if _newclass:freq = _swig_property(_smoothfir.realtime_RACE_freq_get, _smoothfir.realtime_RACE_freq_set)
    __swig_setmethods__["mag"] = _smoothfir.realtime_RACE_mag_set
    __swig_getmethods__["mag"] = _smoothfir.realtime_RACE_mag_get
    if _newclass:mag = _swig_property(_smoothfir.realtime_RACE_mag_get, _smoothfir.realtime_RACE_mag_set)
    __swig_setmethods__["phase"] = _smoothfir.realtime_RACE_phase_set
    __swig_getmethods__["phase"] = _smoothfir.realtime_RACE_phase_get
    if _newclass:phase = _swig_property(_smoothfir.realtime_RACE_phase_get, _smoothfir.realtime_RACE_phase_set)
    def __init__(self): 
        this = _smoothfir.new_realtime_RACE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_realtime_RACE
    __del__ = lambda self : None;
realtime_RACE_swigregister = _smoothfir.realtime_RACE_swigregister
realtime_RACE_swigregister(realtime_RACE)

class SFLOGIC_RACE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFLOGIC_RACE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFLOGIC_RACE, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _smoothfir.new_SFLOGIC_RACE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_RACE
    __del__ = lambda self : None;
    def preinit(self, *args): return _smoothfir.SFLOGIC_RACE_preinit(self, *args)
    def init(self, *args): return _smoothfir.SFLOGIC_RACE_init(self, *args)
    def set_config(self, *args): return _smoothfir.SFLOGIC_RACE_set_config(self, *args)
    def change_config(self, *args): return _smoothfir.SFLOGIC_RACE_change_config(self, *args)
SFLOGIC_RACE_swigregister = _smoothfir.SFLOGIC_RACE_swigregister
SFLOGIC_RACE_swigregister(SFLOGIC_RACE)

MAX_EQUALISERS = _smoothfir.MAX_EQUALISERS
MAX_BANDS = _smoothfir.MAX_BANDS
MSGSIZE = _smoothfir.MSGSIZE
CMD_CHANGE_MAGNITUDE = _smoothfir.CMD_CHANGE_MAGNITUDE
CMD_CHANGE_PHASE = _smoothfir.CMD_CHANGE_PHASE
CMD_GET_INFO = _smoothfir.CMD_GET_INFO

def trim(*args):
  return _smoothfir.trim(*args)
trim = _smoothfir.trim
class realtime_eq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, realtime_eq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, realtime_eq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ifftplan"] = _smoothfir.realtime_eq_ifftplan_set
    __swig_getmethods__["ifftplan"] = _smoothfir.realtime_eq_ifftplan_get
    if _newclass:ifftplan = _swig_property(_smoothfir.realtime_eq_ifftplan_get, _smoothfir.realtime_eq_ifftplan_set)
    __swig_setmethods__["band_count"] = _smoothfir.realtime_eq_band_count_set
    __swig_getmethods__["band_count"] = _smoothfir.realtime_eq_band_count_get
    if _newclass:band_count = _swig_property(_smoothfir.realtime_eq_band_count_get, _smoothfir.realtime_eq_band_count_set)
    __swig_setmethods__["taps"] = _smoothfir.realtime_eq_taps_set
    __swig_getmethods__["taps"] = _smoothfir.realtime_eq_taps_get
    if _newclass:taps = _swig_property(_smoothfir.realtime_eq_taps_get, _smoothfir.realtime_eq_taps_set)
    __swig_setmethods__["minphase"] = _smoothfir.realtime_eq_minphase_set
    __swig_getmethods__["minphase"] = _smoothfir.realtime_eq_minphase_get
    if _newclass:minphase = _swig_property(_smoothfir.realtime_eq_minphase_get, _smoothfir.realtime_eq_minphase_set)
    __swig_setmethods__["coeff"] = _smoothfir.realtime_eq_coeff_set
    __swig_getmethods__["coeff"] = _smoothfir.realtime_eq_coeff_get
    if _newclass:coeff = _swig_property(_smoothfir.realtime_eq_coeff_get, _smoothfir.realtime_eq_coeff_set)
    __swig_setmethods__["active_coeff"] = _smoothfir.realtime_eq_active_coeff_set
    __swig_getmethods__["active_coeff"] = _smoothfir.realtime_eq_active_coeff_get
    if _newclass:active_coeff = _swig_property(_smoothfir.realtime_eq_active_coeff_get, _smoothfir.realtime_eq_active_coeff_set)
    __swig_setmethods__["not_changed"] = _smoothfir.realtime_eq_not_changed_set
    __swig_getmethods__["not_changed"] = _smoothfir.realtime_eq_not_changed_get
    if _newclass:not_changed = _swig_property(_smoothfir.realtime_eq_not_changed_get, _smoothfir.realtime_eq_not_changed_set)
    __swig_setmethods__["freq"] = _smoothfir.realtime_eq_freq_set
    __swig_getmethods__["freq"] = _smoothfir.realtime_eq_freq_get
    if _newclass:freq = _swig_property(_smoothfir.realtime_eq_freq_get, _smoothfir.realtime_eq_freq_set)
    __swig_setmethods__["mag"] = _smoothfir.realtime_eq_mag_set
    __swig_getmethods__["mag"] = _smoothfir.realtime_eq_mag_get
    if _newclass:mag = _swig_property(_smoothfir.realtime_eq_mag_get, _smoothfir.realtime_eq_mag_set)
    __swig_setmethods__["phase"] = _smoothfir.realtime_eq_phase_set
    __swig_getmethods__["phase"] = _smoothfir.realtime_eq_phase_get
    if _newclass:phase = _swig_property(_smoothfir.realtime_eq_phase_get, _smoothfir.realtime_eq_phase_set)
    def __init__(self): 
        this = _smoothfir.new_realtime_eq()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_realtime_eq
    __del__ = lambda self : None;
realtime_eq_swigregister = _smoothfir.realtime_eq_swigregister
realtime_eq_swigregister(realtime_eq)

class SFLOGIC_EQ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFLOGIC_EQ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFLOGIC_EQ, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _smoothfir.new_SFLOGIC_EQ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_EQ
    __del__ = lambda self : None;
    def preinit(self, *args): return _smoothfir.SFLOGIC_EQ_preinit(self, *args)
    def config(self, *args): return _smoothfir.SFLOGIC_EQ_config(self, *args)
    def init(self, *args): return _smoothfir.SFLOGIC_EQ_init(self, *args)
    def change_magnitude(self, *args): return _smoothfir.SFLOGIC_EQ_change_magnitude(self, *args)
    def change_rendering(self, *args): return _smoothfir.SFLOGIC_EQ_change_rendering(self, *args)
SFLOGIC_EQ_swigregister = _smoothfir.SFLOGIC_EQ_swigregister
SFLOGIC_EQ_swigregister(SFLOGIC_EQ)

O_LARGEFILE = _smoothfir.O_LARGEFILE
CB_MSG_START = _smoothfir.CB_MSG_START
CB_MSG_STOP = _smoothfir.CB_MSG_STOP
class dai_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dai_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dai_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["subdev_params"] = _smoothfir.dai_params_subdev_params_set
    __swig_getmethods__["subdev_params"] = _smoothfir.dai_params_subdev_params_get
    if _newclass:subdev_params = _swig_property(_smoothfir.dai_params_subdev_params_get, _smoothfir.dai_params_subdev_params_set)
    __swig_setmethods__["subdev_index"] = _smoothfir.dai_params_subdev_index_set
    __swig_getmethods__["subdev_index"] = _smoothfir.dai_params_subdev_index_get
    if _newclass:subdev_index = _swig_property(_smoothfir.dai_params_subdev_index_get, _smoothfir.dai_params_subdev_index_set)
    __swig_setmethods__["psize"] = _smoothfir.dai_params_psize_set
    __swig_getmethods__["psize"] = _smoothfir.dai_params_psize_get
    if _newclass:psize = _swig_property(_smoothfir.dai_params_psize_get, _smoothfir.dai_params_psize_set)
    __swig_setmethods__["params"] = _smoothfir.dai_params_params_set
    __swig_getmethods__["params"] = _smoothfir.dai_params_params_get
    if _newclass:params = _swig_property(_smoothfir.dai_params_params_get, _smoothfir.dai_params_params_set)
    __swig_setmethods__["ans"] = _smoothfir.dai_params_ans_set
    __swig_getmethods__["ans"] = _smoothfir.dai_params_ans_get
    if _newclass:ans = _swig_property(_smoothfir.dai_params_ans_get, _smoothfir.dai_params_ans_set)
    __swig_setmethods__["msize"] = _smoothfir.dai_params_msize_set
    __swig_getmethods__["msize"] = _smoothfir.dai_params_msize_get
    if _newclass:msize = _swig_property(_smoothfir.dai_params_msize_get, _smoothfir.dai_params_msize_set)
    __swig_setmethods__["msgstr"] = _smoothfir.dai_params_msgstr_set
    __swig_getmethods__["msgstr"] = _smoothfir.dai_params_msgstr_get
    if _newclass:msgstr = _swig_property(_smoothfir.dai_params_msgstr_get, _smoothfir.dai_params_msgstr_set)
    def __init__(self): 
        this = _smoothfir.new_dai_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_dai_params
    __del__ = lambda self : None;
dai_params_swigregister = _smoothfir.dai_params_swigregister
dai_params_swigregister(dai_params)

class comarea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, comarea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, comarea, name)
    __repr__ = _swig_repr
    __swig_setmethods__["blocking_stopped"] = _smoothfir.comarea_blocking_stopped_set
    __swig_getmethods__["blocking_stopped"] = _smoothfir.comarea_blocking_stopped_get
    if _newclass:blocking_stopped = _swig_property(_smoothfir.comarea_blocking_stopped_get, _smoothfir.comarea_blocking_stopped_set)
    __swig_setmethods__["lastbuf_index"] = _smoothfir.comarea_lastbuf_index_set
    __swig_getmethods__["lastbuf_index"] = _smoothfir.comarea_lastbuf_index_get
    if _newclass:lastbuf_index = _swig_property(_smoothfir.comarea_lastbuf_index_get, _smoothfir.comarea_lastbuf_index_set)
    __swig_setmethods__["frames_left"] = _smoothfir.comarea_frames_left_set
    __swig_getmethods__["frames_left"] = _smoothfir.comarea_frames_left_get
    if _newclass:frames_left = _swig_property(_smoothfir.comarea_frames_left_get, _smoothfir.comarea_frames_left_set)
    __swig_setmethods__["cb_lastbuf_index"] = _smoothfir.comarea_cb_lastbuf_index_set
    __swig_getmethods__["cb_lastbuf_index"] = _smoothfir.comarea_cb_lastbuf_index_get
    if _newclass:cb_lastbuf_index = _swig_property(_smoothfir.comarea_cb_lastbuf_index_get, _smoothfir.comarea_cb_lastbuf_index_set)
    __swig_setmethods__["cb_frames_left"] = _smoothfir.comarea_cb_frames_left_set
    __swig_getmethods__["cb_frames_left"] = _smoothfir.comarea_cb_frames_left_get
    if _newclass:cb_frames_left = _swig_property(_smoothfir.comarea_cb_frames_left_get, _smoothfir.comarea_cb_frames_left_set)
    __swig_setmethods__["is_muted"] = _smoothfir.comarea_is_muted_set
    __swig_getmethods__["is_muted"] = _smoothfir.comarea_is_muted_get
    if _newclass:is_muted = _swig_property(_smoothfir.comarea_is_muted_get, _smoothfir.comarea_is_muted_set)
    __swig_setmethods__["delay"] = _smoothfir.comarea_delay_set
    __swig_getmethods__["delay"] = _smoothfir.comarea_delay_get
    if _newclass:delay = _swig_property(_smoothfir.comarea_delay_get, _smoothfir.comarea_delay_set)
    __swig_setmethods__["pid"] = _smoothfir.comarea_pid_set
    __swig_getmethods__["pid"] = _smoothfir.comarea_pid_get
    if _newclass:pid = _swig_property(_smoothfir.comarea_pid_get, _smoothfir.comarea_pid_set)
    __swig_setmethods__["callback_pid"] = _smoothfir.comarea_callback_pid_set
    __swig_getmethods__["callback_pid"] = _smoothfir.comarea_callback_pid_get
    if _newclass:callback_pid = _swig_property(_smoothfir.comarea_callback_pid_get, _smoothfir.comarea_callback_pid_set)
    __swig_setmethods__["dev"] = _smoothfir.comarea_dev_set
    __swig_getmethods__["dev"] = _smoothfir.comarea_dev_get
    if _newclass:dev = _swig_property(_smoothfir.comarea_dev_get, _smoothfir.comarea_dev_set)
    __swig_setmethods__["buffer_format"] = _smoothfir.comarea_buffer_format_set
    __swig_getmethods__["buffer_format"] = _smoothfir.comarea_buffer_format_get
    if _newclass:buffer_format = _swig_property(_smoothfir.comarea_buffer_format_get, _smoothfir.comarea_buffer_format_set)
    __swig_setmethods__["buffer_id"] = _smoothfir.comarea_buffer_id_set
    __swig_getmethods__["buffer_id"] = _smoothfir.comarea_buffer_id_get
    if _newclass:buffer_id = _swig_property(_smoothfir.comarea_buffer_id_get, _smoothfir.comarea_buffer_id_set)
    __swig_setmethods__["cb_buf_index"] = _smoothfir.comarea_cb_buf_index_set
    __swig_getmethods__["cb_buf_index"] = _smoothfir.comarea_cb_buf_index_get
    if _newclass:cb_buf_index = _swig_property(_smoothfir.comarea_cb_buf_index_get, _smoothfir.comarea_cb_buf_index_set)
    def __init__(self): 
        this = _smoothfir.new_comarea()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_comarea
    __del__ = lambda self : None;
comarea_swigregister = _smoothfir.comarea_swigregister
comarea_swigregister(comarea)

class Dai(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dai, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dai, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dai_buffer_format"] = _smoothfir.Dai_dai_buffer_format_set
    __swig_getmethods__["dai_buffer_format"] = _smoothfir.Dai_dai_buffer_format_get
    if _newclass:dai_buffer_format = _swig_property(_smoothfir.Dai_dai_buffer_format_get, _smoothfir.Dai_dai_buffer_format_set)
    __swig_setmethods__["buffers"] = _smoothfir.Dai_buffers_set
    __swig_getmethods__["buffers"] = _smoothfir.Dai_buffers_get
    if _newclass:buffers = _swig_property(_smoothfir.Dai_buffers_get, _smoothfir.Dai_buffers_set)
    def __init__(self, *args): 
        this = _smoothfir.new_Dai(*args)
        try: self.this.append(this)
        except: self.this = this
    def Dai_init(self): return _smoothfir.Dai_Dai_init(self)
    __swig_destroy__ = _smoothfir.delete_Dai
    __del__ = lambda self : None;
    def trigger_callback_io(self): return _smoothfir.Dai_trigger_callback_io(self)
    def minblocksize(self): return _smoothfir.Dai_minblocksize(self)
    def get_input_poll_mode(self): return _smoothfir.Dai_get_input_poll_mode(self)
    def isinit(self): return _smoothfir.Dai_isinit(self)
    def toggle_mute(self, *args): return _smoothfir.Dai_toggle_mute(self, *args)
    def change_delay(self, *args): return _smoothfir.Dai_change_delay(self, *args)
    def die(self): return _smoothfir.Dai_die(self)
    __swig_getmethods__["callback_process_thread"] = lambda x: _smoothfir.Dai_callback_process_thread
    if _newclass:callback_process_thread = staticmethod(_smoothfir.Dai_callback_process_thread)
    def process_callback_input(self, *args): return _smoothfir.Dai_process_callback_input(self, *args)
    def process_callback_output(self, *args): return _smoothfir.Dai_process_callback_output(self, *args)
    def process_callback(self, *args): return _smoothfir.Dai_process_callback(self, *args)
Dai_swigregister = _smoothfir.Dai_swigregister
Dai_swigregister(Dai)

def Dai_callback_process_thread(*args):
  return _smoothfir.Dai_callback_process_thread(*args)
Dai_callback_process_thread = _smoothfir.Dai_callback_process_thread

class filter_process_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, filter_process_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, filter_process_input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inbuf"] = _smoothfir.filter_process_input_inbuf_set
    __swig_getmethods__["inbuf"] = _smoothfir.filter_process_input_inbuf_get
    if _newclass:inbuf = _swig_property(_smoothfir.filter_process_input_inbuf_get, _smoothfir.filter_process_input_inbuf_set)
    __swig_setmethods__["outbuf"] = _smoothfir.filter_process_input_outbuf_set
    __swig_getmethods__["outbuf"] = _smoothfir.filter_process_input_outbuf_get
    if _newclass:outbuf = _swig_property(_smoothfir.filter_process_input_outbuf_get, _smoothfir.filter_process_input_outbuf_set)
    __swig_setmethods__["input_freqcbuf"] = _smoothfir.filter_process_input_input_freqcbuf_set
    __swig_getmethods__["input_freqcbuf"] = _smoothfir.filter_process_input_input_freqcbuf_get
    if _newclass:input_freqcbuf = _swig_property(_smoothfir.filter_process_input_input_freqcbuf_get, _smoothfir.filter_process_input_input_freqcbuf_set)
    __swig_setmethods__["output_freqcbuf"] = _smoothfir.filter_process_input_output_freqcbuf_set
    __swig_getmethods__["output_freqcbuf"] = _smoothfir.filter_process_input_output_freqcbuf_get
    if _newclass:output_freqcbuf = _swig_property(_smoothfir.filter_process_input_output_freqcbuf_get, _smoothfir.filter_process_input_output_freqcbuf_set)
    __swig_setmethods__["filter_read"] = _smoothfir.filter_process_input_filter_read_set
    __swig_getmethods__["filter_read"] = _smoothfir.filter_process_input_filter_read_get
    if _newclass:filter_read = _swig_property(_smoothfir.filter_process_input_filter_read_get, _smoothfir.filter_process_input_filter_read_set)
    __swig_setmethods__["filter_write"] = _smoothfir.filter_process_input_filter_write_set
    __swig_getmethods__["filter_write"] = _smoothfir.filter_process_input_filter_write_get
    if _newclass:filter_write = _swig_property(_smoothfir.filter_process_input_filter_write_get, _smoothfir.filter_process_input_filter_write_set)
    __swig_setmethods__["input_read"] = _smoothfir.filter_process_input_input_read_set
    __swig_getmethods__["input_read"] = _smoothfir.filter_process_input_input_read_get
    if _newclass:input_read = _swig_property(_smoothfir.filter_process_input_input_read_get, _smoothfir.filter_process_input_input_read_set)
    __swig_setmethods__["cb_input_read"] = _smoothfir.filter_process_input_cb_input_read_set
    __swig_getmethods__["cb_input_read"] = _smoothfir.filter_process_input_cb_input_read_get
    if _newclass:cb_input_read = _swig_property(_smoothfir.filter_process_input_cb_input_read_get, _smoothfir.filter_process_input_cb_input_read_set)
    __swig_setmethods__["output_write"] = _smoothfir.filter_process_input_output_write_set
    __swig_getmethods__["output_write"] = _smoothfir.filter_process_input_output_write_get
    if _newclass:output_write = _swig_property(_smoothfir.filter_process_input_output_write_get, _smoothfir.filter_process_input_output_write_set)
    __swig_setmethods__["cb_output_write"] = _smoothfir.filter_process_input_cb_output_write_set
    __swig_getmethods__["cb_output_write"] = _smoothfir.filter_process_input_cb_output_write_get
    if _newclass:cb_output_write = _swig_property(_smoothfir.filter_process_input_cb_output_write_get, _smoothfir.filter_process_input_cb_output_write_set)
    __swig_setmethods__["n_procinputs"] = _smoothfir.filter_process_input_n_procinputs_set
    __swig_getmethods__["n_procinputs"] = _smoothfir.filter_process_input_n_procinputs_get
    if _newclass:n_procinputs = _swig_property(_smoothfir.filter_process_input_n_procinputs_get, _smoothfir.filter_process_input_n_procinputs_set)
    __swig_setmethods__["procinputs"] = _smoothfir.filter_process_input_procinputs_set
    __swig_getmethods__["procinputs"] = _smoothfir.filter_process_input_procinputs_get
    if _newclass:procinputs = _swig_property(_smoothfir.filter_process_input_procinputs_get, _smoothfir.filter_process_input_procinputs_set)
    __swig_setmethods__["n_procoutputs"] = _smoothfir.filter_process_input_n_procoutputs_set
    __swig_getmethods__["n_procoutputs"] = _smoothfir.filter_process_input_n_procoutputs_get
    if _newclass:n_procoutputs = _swig_property(_smoothfir.filter_process_input_n_procoutputs_get, _smoothfir.filter_process_input_n_procoutputs_set)
    __swig_setmethods__["procoutputs"] = _smoothfir.filter_process_input_procoutputs_set
    __swig_getmethods__["procoutputs"] = _smoothfir.filter_process_input_procoutputs_get
    if _newclass:procoutputs = _swig_property(_smoothfir.filter_process_input_procoutputs_get, _smoothfir.filter_process_input_procoutputs_set)
    __swig_setmethods__["n_inputs"] = _smoothfir.filter_process_input_n_inputs_set
    __swig_getmethods__["n_inputs"] = _smoothfir.filter_process_input_n_inputs_get
    if _newclass:n_inputs = _swig_property(_smoothfir.filter_process_input_n_inputs_get, _smoothfir.filter_process_input_n_inputs_set)
    __swig_setmethods__["inputs"] = _smoothfir.filter_process_input_inputs_set
    __swig_getmethods__["inputs"] = _smoothfir.filter_process_input_inputs_get
    if _newclass:inputs = _swig_property(_smoothfir.filter_process_input_inputs_get, _smoothfir.filter_process_input_inputs_set)
    __swig_setmethods__["n_outputs"] = _smoothfir.filter_process_input_n_outputs_set
    __swig_getmethods__["n_outputs"] = _smoothfir.filter_process_input_n_outputs_get
    if _newclass:n_outputs = _swig_property(_smoothfir.filter_process_input_n_outputs_get, _smoothfir.filter_process_input_n_outputs_set)
    __swig_setmethods__["outputs"] = _smoothfir.filter_process_input_outputs_set
    __swig_getmethods__["outputs"] = _smoothfir.filter_process_input_outputs_get
    if _newclass:outputs = _swig_property(_smoothfir.filter_process_input_outputs_get, _smoothfir.filter_process_input_outputs_set)
    __swig_setmethods__["n_filters"] = _smoothfir.filter_process_input_n_filters_set
    __swig_getmethods__["n_filters"] = _smoothfir.filter_process_input_n_filters_get
    if _newclass:n_filters = _swig_property(_smoothfir.filter_process_input_n_filters_get, _smoothfir.filter_process_input_n_filters_set)
    __swig_setmethods__["filters"] = _smoothfir.filter_process_input_filters_set
    __swig_getmethods__["filters"] = _smoothfir.filter_process_input_filters_get
    if _newclass:filters = _swig_property(_smoothfir.filter_process_input_filters_get, _smoothfir.filter_process_input_filters_set)
    __swig_setmethods__["process_index"] = _smoothfir.filter_process_input_process_index_set
    __swig_getmethods__["process_index"] = _smoothfir.filter_process_input_process_index_get
    if _newclass:process_index = _swig_property(_smoothfir.filter_process_input_process_index_get, _smoothfir.filter_process_input_process_index_set)
    __swig_setmethods__["has_bl_input_devs"] = _smoothfir.filter_process_input_has_bl_input_devs_set
    __swig_getmethods__["has_bl_input_devs"] = _smoothfir.filter_process_input_has_bl_input_devs_get
    if _newclass:has_bl_input_devs = _swig_property(_smoothfir.filter_process_input_has_bl_input_devs_get, _smoothfir.filter_process_input_has_bl_input_devs_set)
    __swig_setmethods__["has_bl_output_devs"] = _smoothfir.filter_process_input_has_bl_output_devs_set
    __swig_getmethods__["has_bl_output_devs"] = _smoothfir.filter_process_input_has_bl_output_devs_get
    if _newclass:has_bl_output_devs = _swig_property(_smoothfir.filter_process_input_has_bl_output_devs_get, _smoothfir.filter_process_input_has_bl_output_devs_set)
    __swig_setmethods__["has_cb_input_devs"] = _smoothfir.filter_process_input_has_cb_input_devs_set
    __swig_getmethods__["has_cb_input_devs"] = _smoothfir.filter_process_input_has_cb_input_devs_get
    if _newclass:has_cb_input_devs = _swig_property(_smoothfir.filter_process_input_has_cb_input_devs_get, _smoothfir.filter_process_input_has_cb_input_devs_set)
    __swig_setmethods__["has_cb_output_devs"] = _smoothfir.filter_process_input_has_cb_output_devs_set
    __swig_getmethods__["has_cb_output_devs"] = _smoothfir.filter_process_input_has_cb_output_devs_get
    if _newclass:has_cb_output_devs = _swig_property(_smoothfir.filter_process_input_has_cb_output_devs_get, _smoothfir.filter_process_input_has_cb_output_devs_set)
    def __init__(self): 
        this = _smoothfir.new_filter_process_input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_filter_process_input
    __del__ = lambda self : None;
filter_process_input_swigregister = _smoothfir.filter_process_input_swigregister
filter_process_input_swigregister(filter_process_input)

class output_process_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, output_process_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, output_process_input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filter_sem"] = _smoothfir.output_process_input_filter_sem_set
    __swig_getmethods__["filter_sem"] = _smoothfir.output_process_input_filter_sem_get
    if _newclass:filter_sem = _swig_property(_smoothfir.output_process_input_filter_sem_get, _smoothfir.output_process_input_filter_sem_set)
    __swig_setmethods__["synch_sem"] = _smoothfir.output_process_input_synch_sem_set
    __swig_getmethods__["synch_sem"] = _smoothfir.output_process_input_synch_sem_get
    if _newclass:synch_sem = _swig_property(_smoothfir.output_process_input_synch_sem_get, _smoothfir.output_process_input_synch_sem_set)
    __swig_setmethods__["input_sem"] = _smoothfir.output_process_input_input_sem_set
    __swig_getmethods__["input_sem"] = _smoothfir.output_process_input_input_sem_get
    if _newclass:input_sem = _swig_property(_smoothfir.output_process_input_input_sem_get, _smoothfir.output_process_input_input_sem_set)
    __swig_setmethods__["extra_input_sem"] = _smoothfir.output_process_input_extra_input_sem_set
    __swig_getmethods__["extra_input_sem"] = _smoothfir.output_process_input_extra_input_sem_get
    if _newclass:extra_input_sem = _swig_property(_smoothfir.output_process_input_extra_input_sem_get, _smoothfir.output_process_input_extra_input_sem_set)
    __swig_setmethods__["trigger_callback_io"] = _smoothfir.output_process_input_trigger_callback_io_set
    __swig_getmethods__["trigger_callback_io"] = _smoothfir.output_process_input_trigger_callback_io_get
    if _newclass:trigger_callback_io = _swig_property(_smoothfir.output_process_input_trigger_callback_io_get, _smoothfir.output_process_input_trigger_callback_io_set)
    __swig_setmethods__["checkdrift"] = _smoothfir.output_process_input_checkdrift_set
    __swig_getmethods__["checkdrift"] = _smoothfir.output_process_input_checkdrift_get
    if _newclass:checkdrift = _swig_property(_smoothfir.output_process_input_checkdrift_get, _smoothfir.output_process_input_checkdrift_set)
    def __init__(self): 
        this = _smoothfir.new_output_process_input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_output_process_input
    __del__ = lambda self : None;
output_process_input_swigregister = _smoothfir.output_process_input_swigregister
output_process_input_swigregister(output_process_input)

class input_process_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input_process_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input_process_input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buf"] = _smoothfir.input_process_input_buf_set
    __swig_getmethods__["buf"] = _smoothfir.input_process_input_buf_get
    if _newclass:buf = _swig_property(_smoothfir.input_process_input_buf_get, _smoothfir.input_process_input_buf_set)
    __swig_setmethods__["filter_sem"] = _smoothfir.input_process_input_filter_sem_set
    __swig_getmethods__["filter_sem"] = _smoothfir.input_process_input_filter_sem_get
    if _newclass:filter_sem = _swig_property(_smoothfir.input_process_input_filter_sem_get, _smoothfir.input_process_input_filter_sem_set)
    __swig_setmethods__["output_sem"] = _smoothfir.input_process_input_output_sem_set
    __swig_getmethods__["output_sem"] = _smoothfir.input_process_input_output_sem_get
    if _newclass:output_sem = _swig_property(_smoothfir.input_process_input_output_sem_get, _smoothfir.input_process_input_output_sem_set)
    __swig_setmethods__["extra_output_sem"] = _smoothfir.input_process_input_extra_output_sem_set
    __swig_getmethods__["extra_output_sem"] = _smoothfir.input_process_input_extra_output_sem_get
    if _newclass:extra_output_sem = _swig_property(_smoothfir.input_process_input_extra_output_sem_get, _smoothfir.input_process_input_extra_output_sem_set)
    __swig_setmethods__["synch_sem"] = _smoothfir.input_process_input_synch_sem_set
    __swig_getmethods__["synch_sem"] = _smoothfir.input_process_input_synch_sem_get
    if _newclass:synch_sem = _swig_property(_smoothfir.input_process_input_synch_sem_get, _smoothfir.input_process_input_synch_sem_set)
    def __init__(self): 
        this = _smoothfir.new_input_process_input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_input_process_input
    __del__ = lambda self : None;
input_process_input_swigregister = _smoothfir.input_process_input_swigregister
input_process_input_swigregister(input_process_input)

class SfRun(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SfRun, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SfRun, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sfConv"] = _smoothfir.SfRun_sfConv_set
    __swig_getmethods__["sfConv"] = _smoothfir.SfRun_sfConv_get
    if _newclass:sfConv = _swig_property(_smoothfir.SfRun_sfConv_get, _smoothfir.SfRun_sfConv_set)
    __swig_setmethods__["sfDai"] = _smoothfir.SfRun_sfDai_set
    __swig_getmethods__["sfDai"] = _smoothfir.SfRun_sfDai_get
    if _newclass:sfDai = _swig_property(_smoothfir.SfRun_sfDai_get, _smoothfir.SfRun_sfDai_set)
    __swig_setmethods__["sfDelay"] = _smoothfir.SfRun_sfDelay_set
    __swig_getmethods__["sfDelay"] = _smoothfir.SfRun_sfDelay_get
    if _newclass:sfDelay = _swig_property(_smoothfir.SfRun_sfDelay_get, _smoothfir.SfRun_sfDelay_set)
    __swig_setmethods__["sflogic"] = _smoothfir.SfRun_sflogic_set
    __swig_getmethods__["sflogic"] = _smoothfir.SfRun_sflogic_get
    if _newclass:sflogic = _swig_property(_smoothfir.SfRun_sflogic_get, _smoothfir.SfRun_sflogic_set)
    __swig_setmethods__["sfconf"] = _smoothfir.SfRun_sfconf_set
    __swig_getmethods__["sfconf"] = _smoothfir.SfRun_sfconf_get
    if _newclass:sfconf = _swig_property(_smoothfir.SfRun_sfconf_get, _smoothfir.SfRun_sfconf_set)
    __swig_setmethods__["icomm"] = _smoothfir.SfRun_icomm_set
    __swig_getmethods__["icomm"] = _smoothfir.SfRun_icomm_get
    if _newclass:icomm = _swig_property(_smoothfir.SfRun_icomm_get, _smoothfir.SfRun_icomm_set)
    __swig_setmethods__["isinit"] = _smoothfir.SfRun_isinit_set
    __swig_getmethods__["isinit"] = _smoothfir.SfRun_isinit_get
    if _newclass:isinit = _swig_property(_smoothfir.SfRun_isinit_get, _smoothfir.SfRun_isinit_set)
    __swig_setmethods__["rti_isinit"] = _smoothfir.SfRun_rti_isinit_set
    __swig_getmethods__["rti_isinit"] = _smoothfir.SfRun_rti_isinit_get
    if _newclass:rti_isinit = _swig_property(_smoothfir.SfRun_rti_isinit_get, _smoothfir.SfRun_rti_isinit_set)
    def __init__(self, *args): 
        this = _smoothfir.new_SfRun(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_SfRun
    __del__ = lambda self : None;
    def ismuted(self, *args): return _smoothfir.SfRun_ismuted(self, *args)
    def toggle_mute(self, *args): return _smoothfir.SfRun_toggle_mute(self, *args)
    def set_delay(self, *args): return _smoothfir.SfRun_set_delay(self, *args)
    def get_delay(self, *args): return _smoothfir.SfRun_get_delay(self, *args)
    def print_overflows(self): return _smoothfir.SfRun_print_overflows(self)
    def check_overflows(self): return _smoothfir.SfRun_check_overflows(self)
    def rti_and_overflow(self): return _smoothfir.SfRun_rti_and_overflow(self)
    def icomm_mutex(self, *args): return _smoothfir.SfRun_icomm_mutex(self, *args)
    def memiszero(self, *args): return _smoothfir.SfRun_memiszero(self, *args)
    def test_silent(self, *args): return _smoothfir.SfRun_test_silent(self, *args)
    def dai_trigger_callback_thread(self, *args): return _smoothfir.SfRun_dai_trigger_callback_thread(self, *args)
    def filter_process(self): return _smoothfir.SfRun_filter_process(self)
    def sf_callback_ready(self, *args): return _smoothfir.SfRun_sf_callback_ready(self, *args)
    __swig_getmethods__["module_init_thread"] = lambda x: _smoothfir.SfRun_module_init_thread
    if _newclass:module_init_thread = staticmethod(_smoothfir.SfRun_module_init_thread)
    def preinit(self, *args): return _smoothfir.SfRun_preinit(self, *args)
    def sfrun(self, *args): return _smoothfir.SfRun_sfrun(self, *args)
    def realtime_index(self): return _smoothfir.SfRun_realtime_index(self)
    def reset_peak(self): return _smoothfir.SfRun_reset_peak(self)
    def sflogic_names(self, *args): return _smoothfir.SfRun_sflogic_names(self, *args)
    def sfio_range(self, *args): return _smoothfir.SfRun_sfio_range(self, *args)
    def sf_make_realtime(self, *args): return _smoothfir.SfRun_sf_make_realtime(self, *args)
    def convolver_raw2cbuf(self, *args): return _smoothfir.SfRun_convolver_raw2cbuf(self, *args)
    def convolver_fftplan(self, *args): return _smoothfir.SfRun_convolver_fftplan(self, *args)
    def convolver_coeffs2cbuf(self, *args): return _smoothfir.SfRun_convolver_coeffs2cbuf(self, *args)
    def convolver_cbuf2raw(self, *args): return _smoothfir.SfRun_convolver_cbuf2raw(self, *args)
    def sfstop(self): return _smoothfir.SfRun_sfstop(self)
SfRun_swigregister = _smoothfir.SfRun_swigregister
SfRun_swigregister(SfRun)

def SfRun_module_init_thread(*args):
  return _smoothfir.SfRun_module_init_thread(*args)
SfRun_module_init_thread = _smoothfir.SfRun_module_init_thread

class smoothfir(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, smoothfir, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, smoothfir, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sfconf"] = _smoothfir.smoothfir_sfconf_set
    __swig_getmethods__["sfconf"] = _smoothfir.smoothfir_sfconf_get
    if _newclass:sfconf = _swig_property(_smoothfir.smoothfir_sfconf_get, _smoothfir.smoothfir_sfconf_set)
    __swig_setmethods__["icomm"] = _smoothfir.smoothfir_icomm_set
    __swig_getmethods__["icomm"] = _smoothfir.smoothfir_icomm_get
    if _newclass:icomm = _swig_property(_smoothfir.smoothfir_icomm_get, _smoothfir.smoothfir_icomm_set)
    __swig_setmethods__["sfaccess"] = _smoothfir.smoothfir_sfaccess_set
    __swig_getmethods__["sfaccess"] = _smoothfir.smoothfir_sfaccess_get
    if _newclass:sfaccess = _swig_property(_smoothfir.smoothfir_sfaccess_get, _smoothfir.smoothfir_sfaccess_set)
    def __init__(self): 
        this = _smoothfir.new_smoothfir()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_smoothfir
    __del__ = lambda self : None;
    __swig_setmethods__["sfConf"] = _smoothfir.smoothfir_sfConf_set
    __swig_getmethods__["sfConf"] = _smoothfir.smoothfir_sfConf_get
    if _newclass:sfConf = _swig_property(_smoothfir.smoothfir_sfConf_get, _smoothfir.smoothfir_sfConf_set)
    __swig_setmethods__["sfRun"] = _smoothfir.smoothfir_sfRun_set
    __swig_getmethods__["sfRun"] = _smoothfir.smoothfir_sfRun_get
    if _newclass:sfRun = _swig_property(_smoothfir.smoothfir_sfRun_get, _smoothfir.smoothfir_sfRun_set)
smoothfir_swigregister = _smoothfir.smoothfir_swigregister
smoothfir_swigregister(smoothfir)

class jack_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, jack_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, jack_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_channels"] = _smoothfir.jack_state_n_channels_set
    __swig_getmethods__["n_channels"] = _smoothfir.jack_state_n_channels_get
    if _newclass:n_channels = _swig_property(_smoothfir.jack_state_n_channels_get, _smoothfir.jack_state_n_channels_set)
    __swig_setmethods__["ports"] = _smoothfir.jack_state_ports_set
    __swig_getmethods__["ports"] = _smoothfir.jack_state_ports_get
    if _newclass:ports = _swig_property(_smoothfir.jack_state_ports_get, _smoothfir.jack_state_ports_set)
    __swig_setmethods__["port_name"] = _smoothfir.jack_state_port_name_set
    __swig_getmethods__["port_name"] = _smoothfir.jack_state_port_name_get
    if _newclass:port_name = _swig_property(_smoothfir.jack_state_port_name_get, _smoothfir.jack_state_port_name_set)
    __swig_setmethods__["local_port_name"] = _smoothfir.jack_state_local_port_name_set
    __swig_getmethods__["local_port_name"] = _smoothfir.jack_state_local_port_name_get
    if _newclass:local_port_name = _swig_property(_smoothfir.jack_state_local_port_name_get, _smoothfir.jack_state_local_port_name_set)
    __swig_setmethods__["dest_name"] = _smoothfir.jack_state_dest_name_set
    __swig_getmethods__["dest_name"] = _smoothfir.jack_state_dest_name_get
    if _newclass:dest_name = _swig_property(_smoothfir.jack_state_dest_name_get, _smoothfir.jack_state_dest_name_set)
    def __init__(self): 
        this = _smoothfir.new_jack_state()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _smoothfir.delete_jack_state
    __del__ = lambda self : None;
jack_state_swigregister = _smoothfir.jack_state_swigregister
jack_state_swigregister(jack_state)

class ioJack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ioJack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ioJack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["expected_priority"] = _smoothfir.ioJack_expected_priority_set
    __swig_getmethods__["expected_priority"] = _smoothfir.ioJack_expected_priority_get
    if _newclass:expected_priority = _swig_property(_smoothfir.ioJack_expected_priority_get, _smoothfir.ioJack_expected_priority_set)
    def __init__(self, *args): 
        this = _smoothfir.new_ioJack(*args)
        try: self.this.append(this)
        except: self.this = this
    def preinit(self, *args): return _smoothfir.ioJack_preinit(self, *args)
    __swig_destroy__ = _smoothfir.delete_ioJack
    __del__ = lambda self : None;
    __swig_getmethods__["init_callback"] = lambda x: _smoothfir.ioJack_init_callback
    if _newclass:init_callback = staticmethod(_smoothfir.ioJack_init_callback)
    __swig_getmethods__["init_callback_"] = lambda x: _smoothfir.ioJack_init_callback_
    if _newclass:init_callback_ = staticmethod(_smoothfir.ioJack_init_callback_)
    __swig_getmethods__["latency_callback"] = lambda x: _smoothfir.ioJack_latency_callback
    if _newclass:latency_callback = staticmethod(_smoothfir.ioJack_latency_callback)
    def sf_latency_callback(self, *args): return _smoothfir.ioJack_sf_latency_callback(self, *args)
    __swig_getmethods__["jack_shutdown_callback"] = lambda x: _smoothfir.ioJack_jack_shutdown_callback
    if _newclass:jack_shutdown_callback = staticmethod(_smoothfir.ioJack_jack_shutdown_callback)
    __swig_getmethods__["error_callback"] = lambda x: _smoothfir.ioJack_error_callback
    if _newclass:error_callback = staticmethod(_smoothfir.ioJack_error_callback)
    def sf_shutdown_callback(self): return _smoothfir.ioJack_sf_shutdown_callback(self)
    __swig_getmethods__["jack_process_callback"] = lambda x: _smoothfir.ioJack_jack_process_callback
    if _newclass:jack_process_callback = staticmethod(_smoothfir.ioJack_jack_process_callback)
    def sf_process_callback(self, *args): return _smoothfir.ioJack_sf_process_callback(self, *args)
    def init(self, *args): return _smoothfir.ioJack_init(self, *args)
    def synch_start(self): return _smoothfir.ioJack_synch_start(self)
    def synch_stop(self): return _smoothfir.ioJack_synch_stop(self)
    def connect_port(self, *args): return _smoothfir.ioJack_connect_port(self, *args)
    def disconnect_port(self, *args): return _smoothfir.ioJack_disconnect_port(self, *args)
    def get_jack_port_connections(self, *args): return _smoothfir.ioJack_get_jack_port_connections(self, *args)
    def get_jack_ports(self): return _smoothfir.ioJack_get_jack_ports(self)
    def get_jack_input_physical_ports(self): return _smoothfir.ioJack_get_jack_input_physical_ports(self)
    def get_jack_input_ports(self): return _smoothfir.ioJack_get_jack_input_ports(self)
    def get_jack_output_physical_ports(self): return _smoothfir.ioJack_get_jack_output_physical_ports(self)
    def get_jack_output_ports(self): return _smoothfir.ioJack_get_jack_output_ports(self)
    def is_running(self): return _smoothfir.ioJack_is_running(self)
ioJack_swigregister = _smoothfir.ioJack_swigregister
ioJack_swigregister(ioJack)

def ioJack_init_callback(*args):
  return _smoothfir.ioJack_init_callback(*args)
ioJack_init_callback = _smoothfir.ioJack_init_callback

def ioJack_init_callback_():
  return _smoothfir.ioJack_init_callback_()
ioJack_init_callback_ = _smoothfir.ioJack_init_callback_

def ioJack_latency_callback(*args):
  return _smoothfir.ioJack_latency_callback(*args)
ioJack_latency_callback = _smoothfir.ioJack_latency_callback

def ioJack_jack_shutdown_callback(*args):
  return _smoothfir.ioJack_jack_shutdown_callback(*args)
ioJack_jack_shutdown_callback = _smoothfir.ioJack_jack_shutdown_callback

def ioJack_error_callback(*args):
  return _smoothfir.ioJack_error_callback(*args)
ioJack_error_callback = _smoothfir.ioJack_error_callback

def ioJack_jack_process_callback(*args):
  return _smoothfir.ioJack_jack_process_callback(*args)
ioJack_jack_process_callback = _smoothfir.ioJack_jack_process_callback

class intVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.intVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.intVector___nonzero__(self)
    def __bool__(self): return _smoothfir.intVector___bool__(self)
    def __len__(self): return _smoothfir.intVector___len__(self)
    def pop(self): return _smoothfir.intVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.intVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.intVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.intVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.intVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.intVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.intVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.intVector_append(self, *args)
    def empty(self): return _smoothfir.intVector_empty(self)
    def size(self): return _smoothfir.intVector_size(self)
    def clear(self): return _smoothfir.intVector_clear(self)
    def swap(self, *args): return _smoothfir.intVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.intVector_get_allocator(self)
    def begin(self): return _smoothfir.intVector_begin(self)
    def end(self): return _smoothfir.intVector_end(self)
    def rbegin(self): return _smoothfir.intVector_rbegin(self)
    def rend(self): return _smoothfir.intVector_rend(self)
    def pop_back(self): return _smoothfir.intVector_pop_back(self)
    def erase(self, *args): return _smoothfir.intVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_intVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.intVector_push_back(self, *args)
    def front(self): return _smoothfir.intVector_front(self)
    def back(self): return _smoothfir.intVector_back(self)
    def assign(self, *args): return _smoothfir.intVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.intVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.intVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.intVector_reserve(self, *args)
    def capacity(self): return _smoothfir.intVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_intVector
    __del__ = lambda self : None;
intVector_swigregister = _smoothfir.intVector_swigregister
intVector_swigregister(intVector)

class doubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.doubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.doubleVector___nonzero__(self)
    def __bool__(self): return _smoothfir.doubleVector___bool__(self)
    def __len__(self): return _smoothfir.doubleVector___len__(self)
    def pop(self): return _smoothfir.doubleVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.doubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.doubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.doubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.doubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.doubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.doubleVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.doubleVector_append(self, *args)
    def empty(self): return _smoothfir.doubleVector_empty(self)
    def size(self): return _smoothfir.doubleVector_size(self)
    def clear(self): return _smoothfir.doubleVector_clear(self)
    def swap(self, *args): return _smoothfir.doubleVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.doubleVector_get_allocator(self)
    def begin(self): return _smoothfir.doubleVector_begin(self)
    def end(self): return _smoothfir.doubleVector_end(self)
    def rbegin(self): return _smoothfir.doubleVector_rbegin(self)
    def rend(self): return _smoothfir.doubleVector_rend(self)
    def pop_back(self): return _smoothfir.doubleVector_pop_back(self)
    def erase(self, *args): return _smoothfir.doubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_doubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.doubleVector_push_back(self, *args)
    def front(self): return _smoothfir.doubleVector_front(self)
    def back(self): return _smoothfir.doubleVector_back(self)
    def assign(self, *args): return _smoothfir.doubleVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.doubleVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.doubleVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.doubleVector_reserve(self, *args)
    def capacity(self): return _smoothfir.doubleVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_doubleVector
    __del__ = lambda self : None;
doubleVector_swigregister = _smoothfir.doubleVector_swigregister
doubleVector_swigregister(doubleVector)

class sfchannelVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sfchannelVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sfchannelVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.sfchannelVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.sfchannelVector___nonzero__(self)
    def __bool__(self): return _smoothfir.sfchannelVector___bool__(self)
    def __len__(self): return _smoothfir.sfchannelVector___len__(self)
    def pop(self): return _smoothfir.sfchannelVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.sfchannelVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.sfchannelVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.sfchannelVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.sfchannelVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.sfchannelVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.sfchannelVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.sfchannelVector_append(self, *args)
    def empty(self): return _smoothfir.sfchannelVector_empty(self)
    def size(self): return _smoothfir.sfchannelVector_size(self)
    def clear(self): return _smoothfir.sfchannelVector_clear(self)
    def swap(self, *args): return _smoothfir.sfchannelVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.sfchannelVector_get_allocator(self)
    def begin(self): return _smoothfir.sfchannelVector_begin(self)
    def end(self): return _smoothfir.sfchannelVector_end(self)
    def rbegin(self): return _smoothfir.sfchannelVector_rbegin(self)
    def rend(self): return _smoothfir.sfchannelVector_rend(self)
    def pop_back(self): return _smoothfir.sfchannelVector_pop_back(self)
    def erase(self, *args): return _smoothfir.sfchannelVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_sfchannelVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.sfchannelVector_push_back(self, *args)
    def front(self): return _smoothfir.sfchannelVector_front(self)
    def back(self): return _smoothfir.sfchannelVector_back(self)
    def assign(self, *args): return _smoothfir.sfchannelVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.sfchannelVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.sfchannelVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.sfchannelVector_reserve(self, *args)
    def capacity(self): return _smoothfir.sfchannelVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sfchannelVector
    __del__ = lambda self : None;
sfchannelVector_swigregister = _smoothfir.sfchannelVector_swigregister
sfchannelVector_swigregister(sfchannelVector)

class sfcoeffVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sfcoeffVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sfcoeffVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.sfcoeffVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.sfcoeffVector___nonzero__(self)
    def __bool__(self): return _smoothfir.sfcoeffVector___bool__(self)
    def __len__(self): return _smoothfir.sfcoeffVector___len__(self)
    def pop(self): return _smoothfir.sfcoeffVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.sfcoeffVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.sfcoeffVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.sfcoeffVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.sfcoeffVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.sfcoeffVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.sfcoeffVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.sfcoeffVector_append(self, *args)
    def empty(self): return _smoothfir.sfcoeffVector_empty(self)
    def size(self): return _smoothfir.sfcoeffVector_size(self)
    def clear(self): return _smoothfir.sfcoeffVector_clear(self)
    def swap(self, *args): return _smoothfir.sfcoeffVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.sfcoeffVector_get_allocator(self)
    def begin(self): return _smoothfir.sfcoeffVector_begin(self)
    def end(self): return _smoothfir.sfcoeffVector_end(self)
    def rbegin(self): return _smoothfir.sfcoeffVector_rbegin(self)
    def rend(self): return _smoothfir.sfcoeffVector_rend(self)
    def pop_back(self): return _smoothfir.sfcoeffVector_pop_back(self)
    def erase(self, *args): return _smoothfir.sfcoeffVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_sfcoeffVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.sfcoeffVector_push_back(self, *args)
    def front(self): return _smoothfir.sfcoeffVector_front(self)
    def back(self): return _smoothfir.sfcoeffVector_back(self)
    def assign(self, *args): return _smoothfir.sfcoeffVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.sfcoeffVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.sfcoeffVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.sfcoeffVector_reserve(self, *args)
    def capacity(self): return _smoothfir.sfcoeffVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sfcoeffVector
    __del__ = lambda self : None;
sfcoeffVector_swigregister = _smoothfir.sfcoeffVector_swigregister
sfcoeffVector_swigregister(sfcoeffVector)

class sffilterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sffilterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sffilterVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.sffilterVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.sffilterVector___nonzero__(self)
    def __bool__(self): return _smoothfir.sffilterVector___bool__(self)
    def __len__(self): return _smoothfir.sffilterVector___len__(self)
    def pop(self): return _smoothfir.sffilterVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.sffilterVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.sffilterVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.sffilterVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.sffilterVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.sffilterVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.sffilterVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.sffilterVector_append(self, *args)
    def empty(self): return _smoothfir.sffilterVector_empty(self)
    def size(self): return _smoothfir.sffilterVector_size(self)
    def clear(self): return _smoothfir.sffilterVector_clear(self)
    def swap(self, *args): return _smoothfir.sffilterVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.sffilterVector_get_allocator(self)
    def begin(self): return _smoothfir.sffilterVector_begin(self)
    def end(self): return _smoothfir.sffilterVector_end(self)
    def rbegin(self): return _smoothfir.sffilterVector_rbegin(self)
    def rend(self): return _smoothfir.sffilterVector_rend(self)
    def pop_back(self): return _smoothfir.sffilterVector_pop_back(self)
    def erase(self, *args): return _smoothfir.sffilterVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_sffilterVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.sffilterVector_push_back(self, *args)
    def front(self): return _smoothfir.sffilterVector_front(self)
    def back(self): return _smoothfir.sffilterVector_back(self)
    def assign(self, *args): return _smoothfir.sffilterVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.sffilterVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.sffilterVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.sffilterVector_reserve(self, *args)
    def capacity(self): return _smoothfir.sffilterVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sffilterVector
    __del__ = lambda self : None;
sffilterVector_swigregister = _smoothfir.sffilterVector_swigregister
sffilterVector_swigregister(sffilterVector)

class sffilter_controlVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sffilter_controlVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sffilter_controlVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.sffilter_controlVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.sffilter_controlVector___nonzero__(self)
    def __bool__(self): return _smoothfir.sffilter_controlVector___bool__(self)
    def __len__(self): return _smoothfir.sffilter_controlVector___len__(self)
    def pop(self): return _smoothfir.sffilter_controlVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.sffilter_controlVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.sffilter_controlVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.sffilter_controlVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.sffilter_controlVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.sffilter_controlVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.sffilter_controlVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.sffilter_controlVector_append(self, *args)
    def empty(self): return _smoothfir.sffilter_controlVector_empty(self)
    def size(self): return _smoothfir.sffilter_controlVector_size(self)
    def clear(self): return _smoothfir.sffilter_controlVector_clear(self)
    def swap(self, *args): return _smoothfir.sffilter_controlVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.sffilter_controlVector_get_allocator(self)
    def begin(self): return _smoothfir.sffilter_controlVector_begin(self)
    def end(self): return _smoothfir.sffilter_controlVector_end(self)
    def rbegin(self): return _smoothfir.sffilter_controlVector_rbegin(self)
    def rend(self): return _smoothfir.sffilter_controlVector_rend(self)
    def pop_back(self): return _smoothfir.sffilter_controlVector_pop_back(self)
    def erase(self, *args): return _smoothfir.sffilter_controlVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_sffilter_controlVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.sffilter_controlVector_push_back(self, *args)
    def front(self): return _smoothfir.sffilter_controlVector_front(self)
    def back(self): return _smoothfir.sffilter_controlVector_back(self)
    def assign(self, *args): return _smoothfir.sffilter_controlVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.sffilter_controlVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.sffilter_controlVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.sffilter_controlVector_reserve(self, *args)
    def capacity(self): return _smoothfir.sffilter_controlVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sffilter_controlVector
    __del__ = lambda self : None;
sffilter_controlVector_swigregister = _smoothfir.sffilter_controlVector_swigregister
sffilter_controlVector_swigregister(sffilter_controlVector)

class sfoverflowVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sfoverflowVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sfoverflowVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.sfoverflowVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.sfoverflowVector___nonzero__(self)
    def __bool__(self): return _smoothfir.sfoverflowVector___bool__(self)
    def __len__(self): return _smoothfir.sfoverflowVector___len__(self)
    def pop(self): return _smoothfir.sfoverflowVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.sfoverflowVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.sfoverflowVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.sfoverflowVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.sfoverflowVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.sfoverflowVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.sfoverflowVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.sfoverflowVector_append(self, *args)
    def empty(self): return _smoothfir.sfoverflowVector_empty(self)
    def size(self): return _smoothfir.sfoverflowVector_size(self)
    def clear(self): return _smoothfir.sfoverflowVector_clear(self)
    def swap(self, *args): return _smoothfir.sfoverflowVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.sfoverflowVector_get_allocator(self)
    def begin(self): return _smoothfir.sfoverflowVector_begin(self)
    def end(self): return _smoothfir.sfoverflowVector_end(self)
    def rbegin(self): return _smoothfir.sfoverflowVector_rbegin(self)
    def rend(self): return _smoothfir.sfoverflowVector_rend(self)
    def pop_back(self): return _smoothfir.sfoverflowVector_pop_back(self)
    def erase(self, *args): return _smoothfir.sfoverflowVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_sfoverflowVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.sfoverflowVector_push_back(self, *args)
    def front(self): return _smoothfir.sfoverflowVector_front(self)
    def back(self): return _smoothfir.sfoverflowVector_back(self)
    def assign(self, *args): return _smoothfir.sfoverflowVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.sfoverflowVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.sfoverflowVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.sfoverflowVector_reserve(self, *args)
    def capacity(self): return _smoothfir.sfoverflowVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sfoverflowVector
    __del__ = lambda self : None;
sfoverflowVector_swigregister = _smoothfir.sfoverflowVector_swigregister
sfoverflowVector_swigregister(sfoverflowVector)

class SFLOGICVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SFLOGICVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SFLOGICVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.SFLOGICVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.SFLOGICVector___nonzero__(self)
    def __bool__(self): return _smoothfir.SFLOGICVector___bool__(self)
    def __len__(self): return _smoothfir.SFLOGICVector___len__(self)
    def pop(self): return _smoothfir.SFLOGICVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.SFLOGICVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.SFLOGICVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.SFLOGICVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.SFLOGICVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.SFLOGICVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.SFLOGICVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.SFLOGICVector_append(self, *args)
    def empty(self): return _smoothfir.SFLOGICVector_empty(self)
    def size(self): return _smoothfir.SFLOGICVector_size(self)
    def clear(self): return _smoothfir.SFLOGICVector_clear(self)
    def swap(self, *args): return _smoothfir.SFLOGICVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.SFLOGICVector_get_allocator(self)
    def begin(self): return _smoothfir.SFLOGICVector_begin(self)
    def end(self): return _smoothfir.SFLOGICVector_end(self)
    def rbegin(self): return _smoothfir.SFLOGICVector_rbegin(self)
    def rend(self): return _smoothfir.SFLOGICVector_rend(self)
    def pop_back(self): return _smoothfir.SFLOGICVector_pop_back(self)
    def erase(self, *args): return _smoothfir.SFLOGICVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_SFLOGICVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.SFLOGICVector_push_back(self, *args)
    def front(self): return _smoothfir.SFLOGICVector_front(self)
    def back(self): return _smoothfir.SFLOGICVector_back(self)
    def assign(self, *args): return _smoothfir.SFLOGICVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.SFLOGICVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.SFLOGICVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.SFLOGICVector_reserve(self, *args)
    def capacity(self): return _smoothfir.SFLOGICVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_SFLOGICVector
    __del__ = lambda self : None;
SFLOGICVector_swigregister = _smoothfir.SFLOGICVector_swigregister
SFLOGICVector_swigregister(SFLOGICVector)

class SndFileManagerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SndFileManagerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SndFileManagerVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _smoothfir.SndFileManagerVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _smoothfir.SndFileManagerVector___nonzero__(self)
    def __bool__(self): return _smoothfir.SndFileManagerVector___bool__(self)
    def __len__(self): return _smoothfir.SndFileManagerVector___len__(self)
    def pop(self): return _smoothfir.SndFileManagerVector_pop(self)
    def __getslice__(self, *args): return _smoothfir.SndFileManagerVector___getslice__(self, *args)
    def __setslice__(self, *args): return _smoothfir.SndFileManagerVector___setslice__(self, *args)
    def __delslice__(self, *args): return _smoothfir.SndFileManagerVector___delslice__(self, *args)
    def __delitem__(self, *args): return _smoothfir.SndFileManagerVector___delitem__(self, *args)
    def __getitem__(self, *args): return _smoothfir.SndFileManagerVector___getitem__(self, *args)
    def __setitem__(self, *args): return _smoothfir.SndFileManagerVector___setitem__(self, *args)
    def append(self, *args): return _smoothfir.SndFileManagerVector_append(self, *args)
    def empty(self): return _smoothfir.SndFileManagerVector_empty(self)
    def size(self): return _smoothfir.SndFileManagerVector_size(self)
    def clear(self): return _smoothfir.SndFileManagerVector_clear(self)
    def swap(self, *args): return _smoothfir.SndFileManagerVector_swap(self, *args)
    def get_allocator(self): return _smoothfir.SndFileManagerVector_get_allocator(self)
    def begin(self): return _smoothfir.SndFileManagerVector_begin(self)
    def end(self): return _smoothfir.SndFileManagerVector_end(self)
    def rbegin(self): return _smoothfir.SndFileManagerVector_rbegin(self)
    def rend(self): return _smoothfir.SndFileManagerVector_rend(self)
    def pop_back(self): return _smoothfir.SndFileManagerVector_pop_back(self)
    def erase(self, *args): return _smoothfir.SndFileManagerVector_erase(self, *args)
    def __init__(self, *args): 
        this = _smoothfir.new_SndFileManagerVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _smoothfir.SndFileManagerVector_push_back(self, *args)
    def front(self): return _smoothfir.SndFileManagerVector_front(self)
    def back(self): return _smoothfir.SndFileManagerVector_back(self)
    def assign(self, *args): return _smoothfir.SndFileManagerVector_assign(self, *args)
    def resize(self, *args): return _smoothfir.SndFileManagerVector_resize(self, *args)
    def insert(self, *args): return _smoothfir.SndFileManagerVector_insert(self, *args)
    def reserve(self, *args): return _smoothfir.SndFileManagerVector_reserve(self, *args)
    def capacity(self): return _smoothfir.SndFileManagerVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_SndFileManagerVector
    __del__ = lambda self : None;
SndFileManagerVector_swigregister = _smoothfir.SndFileManagerVector_swigregister
SndFileManagerVector_swigregister(SndFileManagerVector)

class smoothfir_exec:
    
    def __init__(self, xml_config_file):
        # smoothfir convolver object creation
        self.convolver = smoothfir()
        # loading smoothfir config 
        self.convolver.sfConf.sfconf_init(xml_config_file)
        # link to smoothfir configuration data
        self.config = self.convolver.sfConf.sfconf
        # smoothfir agent object for realtime commands 
        self.agent = SFLOGIC_PY(self.convolver.sfConf.sfconf, self.convolver.sfConf.icomm, self.convolver.sfRun)
        self.convolver.sfConf.add_sflogic(self.agent)
        
    def start(self):
        self.convolver.sfRun.sfrun(self.convolver.sfConf.sfConv, self.convolver.sfConf.sfDelay, self.convolver.sfConf.sflogic)
       
    def stop(self):
        self.convolver.sfRun.sfstop()

    def getConvolver(self):
        return self.convolver
	  

# This file is compatible with both classic and new-style classes.


