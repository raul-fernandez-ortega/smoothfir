# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _smoothfir
else:
    import _smoothfir

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _smoothfir.delete_SwigPyIterator

    def value(self):
        return _smoothfir.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _smoothfir.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _smoothfir.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _smoothfir.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _smoothfir.SwigPyIterator_equal(self, x)

    def copy(self):
        return _smoothfir.SwigPyIterator_copy(self)

    def next(self):
        return _smoothfir.SwigPyIterator_next(self)

    def __next__(self):
        return _smoothfir.SwigPyIterator___next__(self)

    def previous(self):
        return _smoothfir.SwigPyIterator_previous(self)

    def advance(self, n):
        return _smoothfir.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _smoothfir.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _smoothfir.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _smoothfir.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _smoothfir.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _smoothfir.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _smoothfir.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _smoothfir:
_smoothfir.SwigPyIterator_swigregister(SwigPyIterator)

class sfcoeff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    is_shared = property(_smoothfir.sfcoeff_is_shared_get, _smoothfir.sfcoeff_is_shared_set)
    name = property(_smoothfir.sfcoeff_name_get, _smoothfir.sfcoeff_name_set)
    intname = property(_smoothfir.sfcoeff_intname_get, _smoothfir.sfcoeff_intname_set)
    n_blocks = property(_smoothfir.sfcoeff_n_blocks_get, _smoothfir.sfcoeff_n_blocks_set)

    def __init__(self):
        _smoothfir.sfcoeff_swiginit(self, _smoothfir.new_sfcoeff())
    __swig_destroy__ = _smoothfir.delete_sfcoeff

# Register sfcoeff in _smoothfir:
_smoothfir.sfcoeff_swigregister(sfcoeff)

class sfchannel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_smoothfir.sfchannel_name_get, _smoothfir.sfchannel_name_set)
    intname = property(_smoothfir.sfchannel_intname_get, _smoothfir.sfchannel_intname_set)

    def __init__(self):
        _smoothfir.sfchannel_swiginit(self, _smoothfir.new_sfchannel())
    __swig_destroy__ = _smoothfir.delete_sfchannel

# Register sfchannel in _smoothfir:
_smoothfir.sfchannel_swigregister(sfchannel)

class sffilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_smoothfir.sffilter_name_get, _smoothfir.sffilter_name_set)
    intname = property(_smoothfir.sffilter_intname_get, _smoothfir.sffilter_intname_set)
    crossfade = property(_smoothfir.sffilter_crossfade_get, _smoothfir.sffilter_crossfade_set)
    n_channels = property(_smoothfir.sffilter_n_channels_get, _smoothfir.sffilter_n_channels_set)
    channels = property(_smoothfir.sffilter_channels_get, _smoothfir.sffilter_channels_set)
    n_filters = property(_smoothfir.sffilter_n_filters_get, _smoothfir.sffilter_n_filters_set)
    filters = property(_smoothfir.sffilter_filters_get, _smoothfir.sffilter_filters_set)

    def __init__(self):
        _smoothfir.sffilter_swiginit(self, _smoothfir.new_sffilter())
    __swig_destroy__ = _smoothfir.delete_sffilter

# Register sffilter in _smoothfir:
_smoothfir.sffilter_swigregister(sffilter)

class sffilter_control(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coeff = property(_smoothfir.sffilter_control_coeff_get, _smoothfir.sffilter_control_coeff_set)
    delayblocks = property(_smoothfir.sffilter_control_delayblocks_get, _smoothfir.sffilter_control_delayblocks_set)
    scale = property(_smoothfir.sffilter_control_scale_get, _smoothfir.sffilter_control_scale_set)
    fscale = property(_smoothfir.sffilter_control_fscale_get, _smoothfir.sffilter_control_fscale_set)

    def __init__(self):
        _smoothfir.sffilter_control_swiginit(self, _smoothfir.new_sffilter_control())
    __swig_destroy__ = _smoothfir.delete_sffilter_control

# Register sffilter_control in _smoothfir:
_smoothfir.sffilter_control_swigregister(sffilter_control)

class intercomm_area(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    doreset_overflow = property(_smoothfir.intercomm_area_doreset_overflow_get, _smoothfir.intercomm_area_doreset_overflow_set)
    sync = property(_smoothfir.intercomm_area_sync_get, _smoothfir.intercomm_area_sync_set)
    period_us = property(_smoothfir.intercomm_area_period_us_get, _smoothfir.intercomm_area_period_us_set)
    realtime_index = property(_smoothfir.intercomm_area_realtime_index_get, _smoothfir.intercomm_area_realtime_index_set)
    fctrl = property(_smoothfir.intercomm_area_fctrl_get, _smoothfir.intercomm_area_fctrl_set)
    in_overflow = property(_smoothfir.intercomm_area_in_overflow_get, _smoothfir.intercomm_area_in_overflow_set)
    out_overflow = property(_smoothfir.intercomm_area_out_overflow_get, _smoothfir.intercomm_area_out_overflow_set)
    ismuted = property(_smoothfir.intercomm_area_ismuted_get, _smoothfir.intercomm_area_ismuted_set)
    delay = property(_smoothfir.intercomm_area_delay_get, _smoothfir.intercomm_area_delay_set)
    full_proc = property(_smoothfir.intercomm_area_full_proc_get, _smoothfir.intercomm_area_full_proc_set)
    ignore_rtprio = property(_smoothfir.intercomm_area_ignore_rtprio_get, _smoothfir.intercomm_area_ignore_rtprio_set)

    def __init__(self):
        _smoothfir.intercomm_area_swiginit(self, _smoothfir.new_intercomm_area())
    __swig_destroy__ = _smoothfir.delete_intercomm_area

# Register intercomm_area in _smoothfir:
_smoothfir.intercomm_area_swigregister(intercomm_area)

class sample_format(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    isfloat = property(_smoothfir.sample_format_isfloat_get, _smoothfir.sample_format_isfloat_set)
    swap = property(_smoothfir.sample_format_swap_get, _smoothfir.sample_format_swap_set)
    bytes = property(_smoothfir.sample_format_bytes_get, _smoothfir.sample_format_bytes_set)
    sbytes = property(_smoothfir.sample_format_sbytes_get, _smoothfir.sample_format_sbytes_set)
    scale = property(_smoothfir.sample_format_scale_get, _smoothfir.sample_format_scale_set)
    format = property(_smoothfir.sample_format_format_get, _smoothfir.sample_format_format_set)

    def __init__(self):
        _smoothfir.sample_format_swiginit(self, _smoothfir.new_sample_format())
    __swig_destroy__ = _smoothfir.delete_sample_format

# Register sample_format in _smoothfir:
_smoothfir.sample_format_swigregister(sample_format)

class buffer_format(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sf = property(_smoothfir.buffer_format_sf_get, _smoothfir.buffer_format_sf_set)
    sample_spacing = property(_smoothfir.buffer_format_sample_spacing_get, _smoothfir.buffer_format_sample_spacing_set)
    byte_offset = property(_smoothfir.buffer_format_byte_offset_get, _smoothfir.buffer_format_byte_offset_set)

    def __init__(self):
        _smoothfir.buffer_format_swiginit(self, _smoothfir.new_buffer_format())
    __swig_destroy__ = _smoothfir.delete_buffer_format

# Register buffer_format in _smoothfir:
_smoothfir.buffer_format_swigregister(buffer_format)

class filter_process(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n_unique_channels = property(_smoothfir.filter_process_n_unique_channels_get, _smoothfir.filter_process_n_unique_channels_set)
    unique_channels = property(_smoothfir.filter_process_unique_channels_get, _smoothfir.filter_process_unique_channels_set)
    n_filters = property(_smoothfir.filter_process_n_filters_get, _smoothfir.filter_process_n_filters_set)
    filters = property(_smoothfir.filter_process_filters_get, _smoothfir.filter_process_filters_set)

    def __init__(self):
        _smoothfir.filter_process_swiginit(self, _smoothfir.new_filter_process())
    __swig_destroy__ = _smoothfir.delete_filter_process

# Register filter_process in _smoothfir:
_smoothfir.filter_process_swigregister(filter_process)

class dai_channels(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sf = property(_smoothfir.dai_channels_sf_get, _smoothfir.dai_channels_sf_set)
    open_channels = property(_smoothfir.dai_channels_open_channels_get, _smoothfir.dai_channels_open_channels_set)
    used_channels = property(_smoothfir.dai_channels_used_channels_get, _smoothfir.dai_channels_used_channels_set)
    channel_selection = property(_smoothfir.dai_channels_channel_selection_get, _smoothfir.dai_channels_channel_selection_set)
    channel_name = property(_smoothfir.dai_channels_channel_name_get, _smoothfir.dai_channels_channel_name_set)

    def __init__(self):
        _smoothfir.dai_channels_swiginit(self, _smoothfir.new_dai_channels())
    __swig_destroy__ = _smoothfir.delete_dai_channels

# Register dai_channels in _smoothfir:
_smoothfir.dai_channels_swigregister(dai_channels)

class _delaybuffer_t_(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fragsize = property(_smoothfir._delaybuffer_t__fragsize_get, _smoothfir._delaybuffer_t__fragsize_set)
    maxdelay = property(_smoothfir._delaybuffer_t__maxdelay_get, _smoothfir._delaybuffer_t__maxdelay_set)
    curdelay = property(_smoothfir._delaybuffer_t__curdelay_get, _smoothfir._delaybuffer_t__curdelay_set)
    curbuf = property(_smoothfir._delaybuffer_t__curbuf_get, _smoothfir._delaybuffer_t__curbuf_set)
    n_fbufs = property(_smoothfir._delaybuffer_t__n_fbufs_get, _smoothfir._delaybuffer_t__n_fbufs_set)
    n_fbufs_cap = property(_smoothfir._delaybuffer_t__n_fbufs_cap_get, _smoothfir._delaybuffer_t__n_fbufs_cap_set)
    fbufs = property(_smoothfir._delaybuffer_t__fbufs_get, _smoothfir._delaybuffer_t__fbufs_set)
    n_rest = property(_smoothfir._delaybuffer_t__n_rest_get, _smoothfir._delaybuffer_t__n_rest_set)
    rbuf = property(_smoothfir._delaybuffer_t__rbuf_get, _smoothfir._delaybuffer_t__rbuf_set)
    shortbuf = property(_smoothfir._delaybuffer_t__shortbuf_get, _smoothfir._delaybuffer_t__shortbuf_set)

    def __init__(self):
        _smoothfir._delaybuffer_t__swiginit(self, _smoothfir.new__delaybuffer_t_())
    __swig_destroy__ = _smoothfir.delete__delaybuffer_t_

# Register _delaybuffer_t_ in _smoothfir:
_smoothfir._delaybuffer_t__swigregister(_delaybuffer_t_)

class subdev(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    finished = property(_smoothfir.subdev_finished_get, _smoothfir.subdev_finished_set)
    isinterleaved = property(_smoothfir.subdev_isinterleaved_get, _smoothfir.subdev_isinterleaved_set)
    bad_alignment = property(_smoothfir.subdev_bad_alignment_get, _smoothfir.subdev_bad_alignment_set)
    index = property(_smoothfir.subdev_index_get, _smoothfir.subdev_index_set)
    fd = property(_smoothfir.subdev_fd_get, _smoothfir.subdev_fd_set)
    buf_size = property(_smoothfir.subdev_buf_size_get, _smoothfir.subdev_buf_size_set)
    buf_offset = property(_smoothfir.subdev_buf_offset_get, _smoothfir.subdev_buf_offset_set)
    buf_left = property(_smoothfir.subdev_buf_left_get, _smoothfir.subdev_buf_left_set)
    block_size = property(_smoothfir.subdev_block_size_get, _smoothfir.subdev_block_size_set)
    block_size_frames = property(_smoothfir.subdev_block_size_frames_get, _smoothfir.subdev_block_size_frames_set)
    channels = property(_smoothfir.subdev_channels_get, _smoothfir.subdev_channels_set)
    db = property(_smoothfir.subdev_db_get, _smoothfir.subdev_db_set)

    def __init__(self):
        _smoothfir.subdev_swiginit(self, _smoothfir.new_subdev())
    __swig_destroy__ = _smoothfir.delete_subdev

# Register subdev in _smoothfir:
_smoothfir.subdev_swigregister(subdev)

class iodev(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    virtual_channels = property(_smoothfir.iodev_virtual_channels_get, _smoothfir.iodev_virtual_channels_set)
    channel_intname = property(_smoothfir.iodev_channel_intname_get, _smoothfir.iodev_channel_intname_set)
    channel_name = property(_smoothfir.iodev_channel_name_get, _smoothfir.iodev_channel_name_set)
    virt2phys = property(_smoothfir.iodev_virt2phys_get, _smoothfir.iodev_virt2phys_set)
    ch = property(_smoothfir.iodev_ch_get, _smoothfir.iodev_ch_set)
    device_params = property(_smoothfir.iodev_device_params_get, _smoothfir.iodev_device_params_set)
    maxdelay = property(_smoothfir.iodev_maxdelay_get, _smoothfir.iodev_maxdelay_set)
    apply_dither = property(_smoothfir.iodev_apply_dither_get, _smoothfir.iodev_apply_dither_set)
    auto_format = property(_smoothfir.iodev_auto_format_get, _smoothfir.iodev_auto_format_set)

    def __init__(self):
        _smoothfir.iodev_swiginit(self, _smoothfir.new_iodev())
    __swig_destroy__ = _smoothfir.delete_iodev

# Register iodev in _smoothfir:
_smoothfir.iodev_swigregister(iodev)

class dai_subdevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    channels = property(_smoothfir.dai_subdevice_channels_get, _smoothfir.dai_subdevice_channels_set)
    i_handle = property(_smoothfir.dai_subdevice_i_handle_get, _smoothfir.dai_subdevice_i_handle_set)
    uses_clock = property(_smoothfir.dai_subdevice_uses_clock_get, _smoothfir.dai_subdevice_uses_clock_set)
    sched_policy = property(_smoothfir.dai_subdevice_sched_policy_get, _smoothfir.dai_subdevice_sched_policy_set)
    sched_param = property(_smoothfir.dai_subdevice_sched_param_get, _smoothfir.dai_subdevice_sched_param_set)
    module = property(_smoothfir.dai_subdevice_module_get, _smoothfir.dai_subdevice_module_set)

    def __init__(self):
        _smoothfir.dai_subdevice_swiginit(self, _smoothfir.new_dai_subdevice())
    __swig_destroy__ = _smoothfir.delete_dai_subdevice

# Register dai_subdevice in _smoothfir:
_smoothfir.dai_subdevice_swigregister(dai_subdevice)

class dai_buffer_format(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n_bytes = property(_smoothfir.dai_buffer_format_n_bytes_get, _smoothfir.dai_buffer_format_n_bytes_set)
    n_samples = property(_smoothfir.dai_buffer_format_n_samples_get, _smoothfir.dai_buffer_format_n_samples_set)
    n_channels = property(_smoothfir.dai_buffer_format_n_channels_get, _smoothfir.dai_buffer_format_n_channels_set)
    bf = property(_smoothfir.dai_buffer_format_bf_get, _smoothfir.dai_buffer_format_bf_set)

    def __init__(self):
        _smoothfir.dai_buffer_format_swiginit(self, _smoothfir.new_dai_buffer_format())
    __swig_destroy__ = _smoothfir.delete_dai_buffer_format

# Register dai_buffer_format in _smoothfir:
_smoothfir.dai_buffer_format_swigregister(dai_buffer_format)

class sfconf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cpu_mhz = property(_smoothfir.sfconf_cpu_mhz_get, _smoothfir.sfconf_cpu_mhz_set)
    n_cpus = property(_smoothfir.sfconf_n_cpus_get, _smoothfir.sfconf_n_cpus_set)
    sampling_rate = property(_smoothfir.sfconf_sampling_rate_get, _smoothfir.sfconf_sampling_rate_set)
    filter_length = property(_smoothfir.sfconf_filter_length_get, _smoothfir.sfconf_filter_length_set)
    n_blocks = property(_smoothfir.sfconf_n_blocks_get, _smoothfir.sfconf_n_blocks_set)
    flowthrough_blocks = property(_smoothfir.sfconf_flowthrough_blocks_get, _smoothfir.sfconf_flowthrough_blocks_set)
    realtime_maxprio = property(_smoothfir.sfconf_realtime_maxprio_get, _smoothfir.sfconf_realtime_maxprio_set)
    realtime_midprio = property(_smoothfir.sfconf_realtime_midprio_get, _smoothfir.sfconf_realtime_midprio_set)
    realtime_usermaxprio = property(_smoothfir.sfconf_realtime_usermaxprio_get, _smoothfir.sfconf_realtime_usermaxprio_set)
    realtime_minprio = property(_smoothfir.sfconf_realtime_minprio_get, _smoothfir.sfconf_realtime_minprio_set)
    realsize = property(_smoothfir.sfconf_realsize_get, _smoothfir.sfconf_realsize_set)
    powersave = property(_smoothfir.sfconf_powersave_get, _smoothfir.sfconf_powersave_set)
    analog_powersave = property(_smoothfir.sfconf_analog_powersave_get, _smoothfir.sfconf_analog_powersave_set)
    overflow_control = property(_smoothfir.sfconf_overflow_control_get, _smoothfir.sfconf_overflow_control_set)
    benchmark = property(_smoothfir.sfconf_benchmark_get, _smoothfir.sfconf_benchmark_set)
    debug = property(_smoothfir.sfconf_debug_get, _smoothfir.sfconf_debug_set)
    quiet = property(_smoothfir.sfconf_quiet_get, _smoothfir.sfconf_quiet_set)
    overflow_warnings = property(_smoothfir.sfconf_overflow_warnings_get, _smoothfir.sfconf_overflow_warnings_set)
    show_progress = property(_smoothfir.sfconf_show_progress_get, _smoothfir.sfconf_show_progress_set)
    realtime_priority = property(_smoothfir.sfconf_realtime_priority_get, _smoothfir.sfconf_realtime_priority_set)
    lock_memory = property(_smoothfir.sfconf_lock_memory_get, _smoothfir.sfconf_lock_memory_set)
    synched_write = property(_smoothfir.sfconf_synched_write_get, _smoothfir.sfconf_synched_write_set)
    allow_poll_mode = property(_smoothfir.sfconf_allow_poll_mode_get, _smoothfir.sfconf_allow_poll_mode_set)
    dither_state = property(_smoothfir.sfconf_dither_state_get, _smoothfir.sfconf_dither_state_set)
    n_coeffs = property(_smoothfir.sfconf_n_coeffs_get, _smoothfir.sfconf_n_coeffs_set)
    coeffs = property(_smoothfir.sfconf_coeffs_get, _smoothfir.sfconf_coeffs_set)
    coeffs_data = property(_smoothfir.sfconf_coeffs_data_get, _smoothfir.sfconf_coeffs_data_set)
    n_channels = property(_smoothfir.sfconf_n_channels_get, _smoothfir.sfconf_n_channels_set)
    channels = property(_smoothfir.sfconf_channels_get, _smoothfir.sfconf_channels_set)
    n_physical_channels = property(_smoothfir.sfconf_n_physical_channels_get, _smoothfir.sfconf_n_physical_channels_set)
    n_virtperphys = property(_smoothfir.sfconf_n_virtperphys_get, _smoothfir.sfconf_n_virtperphys_set)
    phys2virt = property(_smoothfir.sfconf_phys2virt_get, _smoothfir.sfconf_phys2virt_set)
    virt2phys = property(_smoothfir.sfconf_virt2phys_get, _smoothfir.sfconf_virt2phys_set)
    subdevs = property(_smoothfir.sfconf_subdevs_get, _smoothfir.sfconf_subdevs_set)
    delay = property(_smoothfir.sfconf_delay_get, _smoothfir.sfconf_delay_set)
    maxdelay = property(_smoothfir.sfconf_maxdelay_get, _smoothfir.sfconf_maxdelay_set)
    mute = property(_smoothfir.sfconf_mute_get, _smoothfir.sfconf_mute_set)
    n_filters = property(_smoothfir.sfconf_n_filters_get, _smoothfir.sfconf_n_filters_set)
    filters = property(_smoothfir.sfconf_filters_get, _smoothfir.sfconf_filters_set)
    initfctrl = property(_smoothfir.sfconf_initfctrl_get, _smoothfir.sfconf_initfctrl_set)
    fproc = property(_smoothfir.sfconf_fproc_get, _smoothfir.sfconf_fproc_set)
    io = property(_smoothfir.sfconf_io_get, _smoothfir.sfconf_io_set)
    n_logicmods = property(_smoothfir.sfconf_n_logicmods_get, _smoothfir.sfconf_n_logicmods_set)
    logicnames = property(_smoothfir.sfconf_logicnames_get, _smoothfir.sfconf_logicnames_set)

    def __init__(self):
        _smoothfir.sfconf_swiginit(self, _smoothfir.new_sfconf())
    __swig_destroy__ = _smoothfir.delete_sfconf

# Register sfconf in _smoothfir:
_smoothfir.sfconf_swigregister(sfconf)

class apply_subdelay_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    subdelay = property(_smoothfir.apply_subdelay_params_subdelay_get, _smoothfir.apply_subdelay_params_subdelay_set)
    rest = property(_smoothfir.apply_subdelay_params_rest_get, _smoothfir.apply_subdelay_params_rest_set)

    def __init__(self):
        _smoothfir.apply_subdelay_params_swiginit(self, _smoothfir.new_apply_subdelay_params())
    __swig_destroy__ = _smoothfir.delete_apply_subdelay_params

# Register apply_subdelay_params in _smoothfir:
_smoothfir.apply_subdelay_params_swigregister(apply_subdelay_params)

class coeff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    coeff = property(_smoothfir.coeff_coeff_get, _smoothfir.coeff_coeff_set)
    format = property(_smoothfir.coeff_format_get, _smoothfir.coeff_format_set)
    skip = property(_smoothfir.coeff_skip_get, _smoothfir.coeff_skip_set)
    channel = property(_smoothfir.coeff_channel_get, _smoothfir.coeff_channel_set)
    sfinfo = property(_smoothfir.coeff_sfinfo_get, _smoothfir.coeff_sfinfo_set)
    filename = property(_smoothfir.coeff_filename_get, _smoothfir.coeff_filename_set)
    shm_shmids = property(_smoothfir.coeff_shm_shmids_get, _smoothfir.coeff_shm_shmids_set)
    shm_offsets = property(_smoothfir.coeff_shm_offsets_get, _smoothfir.coeff_shm_offsets_set)
    shm_blocks = property(_smoothfir.coeff_shm_blocks_get, _smoothfir.coeff_shm_blocks_set)
    shm_elements = property(_smoothfir.coeff_shm_elements_get, _smoothfir.coeff_shm_elements_set)
    scale = property(_smoothfir.coeff_scale_get, _smoothfir.coeff_scale_set)
    __swig_destroy__ = _smoothfir.delete_coeff

# Register coeff in _smoothfir:
_smoothfir.coeff_swigregister(coeff)
COEFF_FORMAT_RAW = _smoothfir.COEFF_FORMAT_RAW
COEFF_FORMAT_SNDFILE = _smoothfir.COEFF_FORMAT_SNDFILE
COEFF_FORMAT_TEXT = _smoothfir.COEFF_FORMAT_TEXT

class filter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    filter = property(_smoothfir.filter_filter_get, _smoothfir.filter_filter_set)
    fctrl = property(_smoothfir.filter_fctrl_get, _smoothfir.filter_fctrl_set)
    coeff_name = property(_smoothfir.filter_coeff_name_get, _smoothfir.filter_coeff_name_set)
    channel_name = property(_smoothfir.filter_channel_name_get, _smoothfir.filter_channel_name_set)
    filter_name = property(_smoothfir.filter_filter_name_get, _smoothfir.filter_filter_name_set)
    process = property(_smoothfir.filter_process_get, _smoothfir.filter_process_set)
    __swig_destroy__ = _smoothfir.delete_filter

# Register filter in _smoothfir:
_smoothfir.filter_swigregister(filter)


def parse_error(msg):
    return _smoothfir.parse_error(msg)

def parse_error_exit(msg):
    return _smoothfir.parse_error_exit(msg)

def tilde_expansion(path):
    return _smoothfir.tilde_expansion(path)

def parse_sample_format(sf, s, allow_auto):
    return _smoothfir.parse_sample_format(sf, s, allow_auto)

def parse_coeff_sample_format(sf, s):
    return _smoothfir.parse_coeff_sample_format(sf, s)

def real_read(stream, len, filename, realsize, maxitems):
    return _smoothfir.real_read(stream, len, filename, realsize, maxitems)

def sndfile_read(filename, totitems, coeff, channel, snfinfo, realsize, maxitems):
    return _smoothfir.sndfile_read(filename, totitems, coeff, channel, snfinfo, realsize, maxitems)

def number_of_cpus():
    return _smoothfir.number_of_cpus()
class SfConf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _sfrun):
        _smoothfir.SfConf_swiginit(self, _smoothfir.new_SfConf(_sfrun))
    __swig_destroy__ = _smoothfir.delete_SfConf
    quiet = property(_smoothfir.SfConf_quiet_get, _smoothfir.SfConf_quiet_set)
    dither_state = property(_smoothfir.SfConf_dither_state_get, _smoothfir.SfConf_dither_state_set)
    coeffs_data = property(_smoothfir.SfConf_coeffs_data_get, _smoothfir.SfConf_coeffs_data_set)
    n_channels = property(_smoothfir.SfConf_n_channels_get, _smoothfir.SfConf_n_channels_set)
    maxdelay = property(_smoothfir.SfConf_maxdelay_get, _smoothfir.SfConf_maxdelay_set)
    filters = property(_smoothfir.SfConf_filters_get, _smoothfir.SfConf_filters_set)
    sfconf = property(_smoothfir.SfConf_sfconf_get, _smoothfir.SfConf_sfconf_set)
    icomm = property(_smoothfir.SfConf_icomm_get, _smoothfir.SfConf_icomm_set)
    sfConv = property(_smoothfir.SfConf_sfConv_get, _smoothfir.SfConf_sfConv_set)
    sfDai = property(_smoothfir.SfConf_sfDai_get, _smoothfir.SfConf_sfDai_set)
    sfDelay = property(_smoothfir.SfConf_sfDelay_get, _smoothfir.SfConf_sfDelay_set)
    sfRun = property(_smoothfir.SfConf_sfRun_get, _smoothfir.SfConf_sfRun_set)
    iojack = property(_smoothfir.SfConf_iojack_get, _smoothfir.SfConf_iojack_set)
    sflogic = property(_smoothfir.SfConf_sflogic_get, _smoothfir.SfConf_sflogic_set)

    def sfconf_init(self, filename):
        return _smoothfir.SfConf_sfconf_init(self, filename)

    def add_sflogic(self, _sflogic):
        return _smoothfir.SfConf_add_sflogic(self, _sflogic)

# Register SfConf in _smoothfir:
_smoothfir.SfConf_swigregister(SfConf)

class SfCallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _smoothfir.SfCallback_swiginit(self, _smoothfir.new_SfCallback())
    __swig_destroy__ = _smoothfir.delete_SfCallback

    def sf_callback_ready(self, io):
        return _smoothfir.SfCallback_sf_callback_ready(self, io)

    def rti_and_overflow(self):
        return _smoothfir.SfCallback_rti_and_overflow(self)

# Register SfCallback in _smoothfir:
_smoothfir.SfCallback_swigregister(SfCallback)

class SfAccess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    overflow = property(_smoothfir.SfAccess_overflow_get, _smoothfir.SfAccess_overflow_set)
    dummy = property(_smoothfir.SfAccess_dummy_get, _smoothfir.SfAccess_dummy_set)

    def __init__(self):
        _smoothfir.SfAccess_swiginit(self, _smoothfir.new_SfAccess())
    __swig_destroy__ = _smoothfir.delete_SfAccess

    def control_mutex(self, lock):
        return _smoothfir.SfAccess_control_mutex(self, lock)

    def reset_peak(self):
        return _smoothfir.SfAccess_reset_peak(self)

    def exit(self, bf_exit_code):
        return _smoothfir.SfAccess_exit(self, bf_exit_code)

    def toggle_mute(self, io, channel):
        return _smoothfir.SfAccess_toggle_mute(self, io, channel)

    def ismuted(self, io, channel):
        return _smoothfir.SfAccess_ismuted(self, io, channel)

    def set_delay(self, io, channel, delay):
        return _smoothfir.SfAccess_set_delay(self, io, channel, delay)

    def get_delay(self, io, channel):
        return _smoothfir.SfAccess_get_delay(self, io, channel)

    def realtime_index(self):
        return _smoothfir.SfAccess_realtime_index(self)

    def sfio_names(self, io, n_names):
        return _smoothfir.SfAccess_sfio_names(self, io, n_names)

    def sfio_range(self, io, modindex, range):
        return _smoothfir.SfAccess_sfio_range(self, io, modindex, range)

    def sfio_command(self, io, modindex, params, error):
        return _smoothfir.SfAccess_sfio_command(self, io, modindex, params, error)

    def sflogic_names(self, n_names):
        return _smoothfir.SfAccess_sflogic_names(self, n_names)

    def sflogic_exec(self, modindex, command, nparams):
        return _smoothfir.SfAccess_sflogic_exec(self, modindex, command, nparams)

    def sflogic_command(self, modindex, params, error):
        return _smoothfir.SfAccess_sflogic_command(self, modindex, params, error)

    def convolver_coeffs2cbuf(self, src, dest):
        return _smoothfir.SfAccess_convolver_coeffs2cbuf(self, src, dest)

    def convolver_fftplan(self, order, invert, inplace):
        return _smoothfir.SfAccess_convolver_fftplan(self, order, invert, inplace)

    def set_subdelay(self, io, channel, subdelay):
        return _smoothfir.SfAccess_set_subdelay(self, io, channel, subdelay)

    def get_subdelay(self, io, channel):
        return _smoothfir.SfAccess_get_subdelay(self, io, channel)

# Register SfAccess in _smoothfir:
_smoothfir.SfAccess_swigregister(SfAccess)

class IO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sfconf = property(_smoothfir.IO_sfconf_get, _smoothfir.IO_sfconf_set)
    icomm = property(_smoothfir.IO_icomm_get, _smoothfir.IO_icomm_set)
    iodev = property(_smoothfir.IO_iodev_get, _smoothfir.IO_iodev_set)
    sample_format = property(_smoothfir.IO_sample_format_get, _smoothfir.IO_sample_format_set)
    sample_rate = property(_smoothfir.IO_sample_rate_get, _smoothfir.IO_sample_rate_set)

    def __init__(self, _sfconf, _icomm):
        _smoothfir.IO_swiginit(self, _smoothfir.new_IO(_sfconf, _icomm))
    __swig_destroy__ = _smoothfir.delete_IO

    def preinit(self, io, _iodev):
        return _smoothfir.IO_preinit(self, io, _iodev)

    def init(self, io, i_handle, used_channels, channel_selection, callback_subdev):
        return _smoothfir.IO_init(self, io, i_handle, used_channels, channel_selection, callback_subdev)

    def synch_start(self):
        return _smoothfir.IO_synch_start(self)

    def synch_stop(self):
        return _smoothfir.IO_synch_stop(self)

    def start(self, io):
        return _smoothfir.IO_start(self, io)

    def stop(self, io):
        return _smoothfir.IO_stop(self, io)

    def connect_port(self, port_name, dest_name):
        return _smoothfir.IO_connect_port(self, port_name, dest_name)

    def disconnect_port(self, port_name, dest_name):
        return _smoothfir.IO_disconnect_port(self, port_name, dest_name)

    def get_jack_port_connections(self, port_name):
        return _smoothfir.IO_get_jack_port_connections(self, port_name)

    def get_jack_ports(self):
        return _smoothfir.IO_get_jack_ports(self)

    def get_jack_input_physical_ports(self):
        return _smoothfir.IO_get_jack_input_physical_ports(self)

    def get_jack_input_ports(self):
        return _smoothfir.IO_get_jack_input_ports(self)

    def get_jack_output_physical_ports(self):
        return _smoothfir.IO_get_jack_output_physical_ports(self)

    def get_jack_output_ports(self):
        return _smoothfir.IO_get_jack_output_ports(self)

    def is_running(self):
        return _smoothfir.IO_is_running(self)

# Register IO in _smoothfir:
_smoothfir.IO_swigregister(IO)

MAX_MSG_LEN = _smoothfir.MAX_MSG_LEN
SF_FORK_DONT_FORK = _smoothfir.SF_FORK_DONT_FORK
SF_FORK_PRIO_MAX = _smoothfir.SF_FORK_PRIO_MAX
SF_FORK_PRIO_FILTER = _smoothfir.SF_FORK_PRIO_FILTER
SF_FORK_PRIO_OTHER = _smoothfir.SF_FORK_PRIO_OTHER
class state(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fctrl = property(_smoothfir.state_fctrl_get, _smoothfir.state_fctrl_set)
    fchanged = property(_smoothfir.state_fchanged_get, _smoothfir.state_fchanged_set)
    delay = property(_smoothfir.state_delay_get, _smoothfir.state_delay_set)
    subdelay = property(_smoothfir.state_subdelay_get, _smoothfir.state_subdelay_set)
    toggle_mute = property(_smoothfir.state_toggle_mute_get, _smoothfir.state_toggle_mute_set)

    def __init__(self):
        _smoothfir.state_swiginit(self, _smoothfir.new_state())
    __swig_destroy__ = _smoothfir.delete_state

# Register state in _smoothfir:
_smoothfir.state_swigregister(state)

class sleep_task(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    do_sleep = property(_smoothfir.sleep_task_do_sleep_get, _smoothfir.sleep_task_do_sleep_set)
    block_sleep = property(_smoothfir.sleep_task_block_sleep_get, _smoothfir.sleep_task_block_sleep_set)
    blocks = property(_smoothfir.sleep_task_blocks_get, _smoothfir.sleep_task_blocks_set)
    seconds = property(_smoothfir.sleep_task_seconds_get, _smoothfir.sleep_task_seconds_set)
    useconds = property(_smoothfir.sleep_task_useconds_get, _smoothfir.sleep_task_useconds_set)

    def __init__(self):
        _smoothfir.sleep_task_swiginit(self, _smoothfir.new_sleep_task())
    __swig_destroy__ = _smoothfir.delete_sleep_task

# Register sleep_task in _smoothfir:
_smoothfir.sleep_task_swigregister(sleep_task)

class SFLOGIC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sfconf = property(_smoothfir.SFLOGIC_sfconf_get, _smoothfir.SFLOGIC_sfconf_set)
    icomm = property(_smoothfir.SFLOGIC_icomm_get, _smoothfir.SFLOGIC_icomm_set)
    sfaccess = property(_smoothfir.SFLOGIC_sfaccess_get, _smoothfir.SFLOGIC_sfaccess_set)
    unique = property(_smoothfir.SFLOGIC_unique_get, _smoothfir.SFLOGIC_unique_set)
    name = property(_smoothfir.SFLOGIC_name_get, _smoothfir.SFLOGIC_name_set)
    synch_sem = property(_smoothfir.SFLOGIC_synch_sem_get, _smoothfir.SFLOGIC_synch_sem_set)
    fork_mode = property(_smoothfir.SFLOGIC_fork_mode_get, _smoothfir.SFLOGIC_fork_mode_set)
    event_pipe = property(_smoothfir.SFLOGIC_event_pipe_get, _smoothfir.SFLOGIC_event_pipe_set)
    msg = property(_smoothfir.SFLOGIC_msg_get, _smoothfir.SFLOGIC_msg_set)

    def __init__(self, _sfconf, _icomm, _sfaccess):
        _smoothfir.SFLOGIC_swiginit(self, _smoothfir.new_SFLOGIC(_sfconf, _icomm, _sfaccess))
    __swig_destroy__ = _smoothfir.delete_SFLOGIC

    def iscallback(self):
        return _smoothfir.SFLOGIC_iscallback(self)

    def preinit(self, sfparams, debug):
        return _smoothfir.SFLOGIC_preinit(self, sfparams, debug)

    def init(self, event_fd, _synch_sem):
        return _smoothfir.SFLOGIC_init(self, event_fd, _synch_sem)

    def input_timed(self, buffer, channel):
        return _smoothfir.SFLOGIC_input_timed(self, buffer, channel)

    def output_timed(self, buffer, channel):
        return _smoothfir.SFLOGIC_output_timed(self, buffer, channel)

    def print_overflows(self):
        return _smoothfir.SFLOGIC_print_overflows(self)

# Register SFLOGIC in _smoothfir:
_smoothfir.SFLOGIC_swigregister(SFLOGIC)

FILTER_ID = _smoothfir.FILTER_ID
INPUT_ID = _smoothfir.INPUT_ID
OUTPUT_ID = _smoothfir.OUTPUT_ID
COEFF_ID = _smoothfir.COEFF_ID
class SFLOGIC_PY(SFLOGIC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _sfconf, _icomm, _sfaccess):
        _smoothfir.SFLOGIC_PY_swiginit(self, _smoothfir.new_SFLOGIC_PY(_sfconf, _icomm, _sfaccess))
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_PY

    def preinit(self, sfparams, _debug):
        return _smoothfir.SFLOGIC_PY_preinit(self, sfparams, _debug)

    def init(self, event_fd, synch_sem):
        return _smoothfir.SFLOGIC_PY_init(self, event_fd, synch_sem)

    def getCoeffData(self):
        return _smoothfir.SFLOGIC_PY_getCoeffData(self)

    def getFilterData(self):
        return _smoothfir.SFLOGIC_PY_getFilterData(self)

    def getFilterControl(self, n):
        return _smoothfir.SFLOGIC_PY_getFilterControl(self, n)

    def getChannels(self, io):
        return _smoothfir.SFLOGIC_PY_getChannels(self, io)

    def is_running(self):
        return _smoothfir.SFLOGIC_PY_is_running(self)

    def getFilternChannels(self, filter, io):
        return _smoothfir.SFLOGIC_PY_getFilternChannels(self, filter, io)

    def getFilternFilters(self, filter, io):
        return _smoothfir.SFLOGIC_PY_getFilternFilters(self, filter, io)

    def getFilterCoeff(self, filtername):
        return _smoothfir.SFLOGIC_PY_getFilterCoeff(self, filtername)

    def getFilterChannels(self, filter, io):
        return _smoothfir.SFLOGIC_PY_getFilterChannels(self, filter, io)

    def getFilterFilters(self, filter, io):
        return _smoothfir.SFLOGIC_PY_getFilterFilters(self, filter, io)

    def connect_port(self, port_name, dest_name):
        return _smoothfir.SFLOGIC_PY_connect_port(self, port_name, dest_name)

    def disconnect_port(self, port_name, dest_name):
        return _smoothfir.SFLOGIC_PY_disconnect_port(self, port_name, dest_name)

    def get_jack_port_connections(self, port_name):
        return _smoothfir.SFLOGIC_PY_get_jack_port_connections(self, port_name)

    def get_jack_ports(self):
        return _smoothfir.SFLOGIC_PY_get_jack_ports(self)

    def get_jack_input_physical_ports(self):
        return _smoothfir.SFLOGIC_PY_get_jack_input_physical_ports(self)

    def get_jack_input_ports(self):
        return _smoothfir.SFLOGIC_PY_get_jack_input_ports(self)

    def get_jack_output_physical_ports(self):
        return _smoothfir.SFLOGIC_PY_get_jack_output_physical_ports(self)

    def get_jack_output_ports(self):
        return _smoothfir.SFLOGIC_PY_get_jack_output_ports(self)

    def change_input_attenuation(self, inputchannel, scale):
        return _smoothfir.SFLOGIC_PY_change_input_attenuation(self, inputchannel, scale)

    def get_input_attenuation(self, inputchannel):
        return _smoothfir.SFLOGIC_PY_get_input_attenuation(self, inputchannel)

    def change_output_attenuation(self, outputchannel, scale):
        return _smoothfir.SFLOGIC_PY_change_output_attenuation(self, outputchannel, scale)

    def get_output_attenuation(self, outputchannel):
        return _smoothfir.SFLOGIC_PY_get_output_attenuation(self, outputchannel)

    def change_filter_coeff(self, filtername, coeff):
        return _smoothfir.SFLOGIC_PY_change_filter_coeff(self, filtername, coeff)

    def change_filter_attenuation(self, filtername, INOUT, nchannel, scale):
        return _smoothfir.SFLOGIC_PY_change_filter_attenuation(self, filtername, INOUT, nchannel, scale)

    def get_filter_attenuation(self, filtername, INOUT, nchannel):
        return _smoothfir.SFLOGIC_PY_get_filter_attenuation(self, filtername, INOUT, nchannel)

    def change_filter_filter_attenuation(self, filtername, nfilter, scale):
        return _smoothfir.SFLOGIC_PY_change_filter_filter_attenuation(self, filtername, nfilter, scale)

    def toggle_mute(self, INOUT, nchannel):
        return _smoothfir.SFLOGIC_PY_toggle_mute(self, INOUT, nchannel)

    def get_inpeaks(self):
        return _smoothfir.SFLOGIC_PY_get_inpeaks(self)

    def get_outpeaks(self):
        return _smoothfir.SFLOGIC_PY_get_outpeaks(self)

    def reset_peaks(self):
        return _smoothfir.SFLOGIC_PY_reset_peaks(self)

# Register SFLOGIC_PY in _smoothfir:
_smoothfir.SFLOGIC_PY_swigregister(SFLOGIC_PY)

class SndFileManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mutex = property(_smoothfir.SndFileManager_mutex_get, _smoothfir.SndFileManager_mutex_set)

    def __init__(self, _sfconf, _icomm, _sfaccess):
        _smoothfir.SndFileManager_swiginit(self, _smoothfir.new_SndFileManager(_sfconf, _icomm, _sfaccess))
    __swig_destroy__ = _smoothfir.delete_SndFileManager

    def preinit(self, sfparams, _debug):
        return _smoothfir.SndFileManager_preinit(self, sfparams, _debug)

    def init(self):
        return _smoothfir.SndFileManager_init(self)

    def config(self, _path, _is_in, _channel, _recplay):
        return _smoothfir.SndFileManager_config(self, _path, _is_in, _channel, _recplay)

    def start(self, _l_time):
        return _smoothfir.SndFileManager_start(self, _l_time)

    def stop(self):
        return _smoothfir.SndFileManager_stop(self)

    def openFilename(self):
        return _smoothfir.SndFileManager_openFilename(self)

    def closeFilename(self):
        return _smoothfir.SndFileManager_closeFilename(self)

    def input_timed(self, buffer, channel):
        return _smoothfir.SndFileManager_input_timed(self, buffer, channel)

    def output_timed(self, buffer, channel):
        return _smoothfir.SndFileManager_output_timed(self, buffer, channel)

# Register SndFileManager in _smoothfir:
_smoothfir.SndFileManager_swigregister(SndFileManager)

class SFLOGIC_RECPLAY(SFLOGIC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _sfconf, _icomm, _sfaccess):
        _smoothfir.SFLOGIC_RECPLAY_swiginit(self, _smoothfir.new_SFLOGIC_RECPLAY(_sfconf, _icomm, _sfaccess))
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_RECPLAY

    def preinit(self, sfparams, _debug):
        return _smoothfir.SFLOGIC_RECPLAY_preinit(self, sfparams, _debug)

    def addManager(self, _manager):
        return _smoothfir.SFLOGIC_RECPLAY_addManager(self, _manager)

    def init(self, event_fd, synch_sem):
        return _smoothfir.SFLOGIC_RECPLAY_init(self, event_fd, synch_sem)

    def command(self, params):
        return _smoothfir.SFLOGIC_RECPLAY_command(self, params)

    def message(self):
        return _smoothfir.SFLOGIC_RECPLAY_message(self)

    def input_timed(self, buffer, channel):
        return _smoothfir.SFLOGIC_RECPLAY_input_timed(self, buffer, channel)

    def output_timed(self, buffer, channel):
        return _smoothfir.SFLOGIC_RECPLAY_output_timed(self, buffer, channel)

# Register SFLOGIC_RECPLAY in _smoothfir:
_smoothfir.SFLOGIC_RECPLAY_swigregister(SFLOGIC_RECPLAY)

LADSPA_CONTROLS_MAX = _smoothfir.LADSPA_CONTROLS_MAX
LADSPA_OUTPUT_MAX = _smoothfir.LADSPA_OUTPUT_MAX

def field_repeat_test(bitset, name, bit):
    return _smoothfir.field_repeat_test(bitset, name, bit)

def field_mandatory_test(bitset, bits, name):
    return _smoothfir.field_mandatory_test(bitset, bits, name)
class LADSPA_Control(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    index = property(_smoothfir.LADSPA_Control_index_get, _smoothfir.LADSPA_Control_index_set)
    control_label = property(_smoothfir.LADSPA_Control_control_label_get, _smoothfir.LADSPA_Control_control_label_set)
    control_value = property(_smoothfir.LADSPA_Control_control_value_get, _smoothfir.LADSPA_Control_control_value_set)

    def __init__(self):
        _smoothfir.LADSPA_Control_swiginit(self, _smoothfir.new_LADSPA_Control())
    __swig_destroy__ = _smoothfir.delete_LADSPA_Control

# Register LADSPA_Control in _smoothfir:
_smoothfir.LADSPA_Control_swigregister(LADSPA_Control)

class LADSPA_PLUGIN(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mutex = property(_smoothfir.LADSPA_PLUGIN_mutex_get, _smoothfir.LADSPA_PLUGIN_mutex_set)

    def __init__(self, _sfconf, _icomm, _sfaccess):
        _smoothfir.LADSPA_PLUGIN_swiginit(self, _smoothfir.new_LADSPA_PLUGIN(_sfconf, _icomm, _sfaccess))
    __swig_destroy__ = _smoothfir.delete_LADSPA_PLUGIN

    def preinit(self, sfparams, _debug):
        return _smoothfir.LADSPA_PLUGIN_preinit(self, sfparams, _debug)

    def init(self):
        return _smoothfir.LADSPA_PLUGIN_init(self)

    def setLabel(self, label):
        return _smoothfir.LADSPA_PLUGIN_setLabel(self, label)

    def setInput(self, _InputChannel):
        return _smoothfir.LADSPA_PLUGIN_setInput(self, _InputChannel)

    def addOutput(self, _OutputChannel):
        return _smoothfir.LADSPA_PLUGIN_addOutput(self, _OutputChannel)

    def setPortValue(self, port_name, port_value):
        return _smoothfir.LADSPA_PLUGIN_setPortValue(self, port_name, port_value)

    def input_timed(self, buffer, channel):
        return _smoothfir.LADSPA_PLUGIN_input_timed(self, buffer, channel)

    def output_timed(self, buffer, channel):
        return _smoothfir.LADSPA_PLUGIN_output_timed(self, buffer, channel)

# Register LADSPA_PLUGIN in _smoothfir:
_smoothfir.LADSPA_PLUGIN_swigregister(LADSPA_PLUGIN)

class SFLOGIC_LADSPA(SFLOGIC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    plugins = property(_smoothfir.SFLOGIC_LADSPA_plugins_get, _smoothfir.SFLOGIC_LADSPA_plugins_set)

    def __init__(self, _sfconf, _icomm, _sfaccess):
        _smoothfir.SFLOGIC_LADSPA_swiginit(self, _smoothfir.new_SFLOGIC_LADSPA(_sfconf, _icomm, _sfaccess))
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_LADSPA

    def preinit(self, sfparams, _debug):
        return _smoothfir.SFLOGIC_LADSPA_preinit(self, sfparams, _debug)

    def init(self, event_fd, _synch_sem):
        return _smoothfir.SFLOGIC_LADSPA_init(self, event_fd, _synch_sem)

    def addPlugin(self, plugin):
        return _smoothfir.SFLOGIC_LADSPA_addPlugin(self, plugin)

    def input_timed(self, buffer, channel):
        return _smoothfir.SFLOGIC_LADSPA_input_timed(self, buffer, channel)

    def output_timed(self, buffer, channel):
        return _smoothfir.SFLOGIC_LADSPA_output_timed(self, buffer, channel)

# Register SFLOGIC_LADSPA in _smoothfir:
_smoothfir.SFLOGIC_LADSPA_swigregister(SFLOGIC_LADSPA)

PcmInt16Bit = _smoothfir.PcmInt16Bit
PcmFloat32Bit = _smoothfir.PcmFloat32Bit
PcmFloat64Bit = _smoothfir.PcmFloat64Bit
class realtime_RACE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ifftplan = property(_smoothfir.realtime_RACE_ifftplan_get, _smoothfir.realtime_RACE_ifftplan_set)
    band_count = property(_smoothfir.realtime_RACE_band_count_get, _smoothfir.realtime_RACE_band_count_set)
    taps = property(_smoothfir.realtime_RACE_taps_get, _smoothfir.realtime_RACE_taps_set)
    direct_coeff = property(_smoothfir.realtime_RACE_direct_coeff_get, _smoothfir.realtime_RACE_direct_coeff_set)
    cross_coeff = property(_smoothfir.realtime_RACE_cross_coeff_get, _smoothfir.realtime_RACE_cross_coeff_set)
    active_coeff = property(_smoothfir.realtime_RACE_active_coeff_get, _smoothfir.realtime_RACE_active_coeff_set)
    not_changed = property(_smoothfir.realtime_RACE_not_changed_get, _smoothfir.realtime_RACE_not_changed_set)
    freq = property(_smoothfir.realtime_RACE_freq_get, _smoothfir.realtime_RACE_freq_set)
    mag = property(_smoothfir.realtime_RACE_mag_get, _smoothfir.realtime_RACE_mag_set)
    phase = property(_smoothfir.realtime_RACE_phase_get, _smoothfir.realtime_RACE_phase_set)

    def __init__(self):
        _smoothfir.realtime_RACE_swiginit(self, _smoothfir.new_realtime_RACE())
    __swig_destroy__ = _smoothfir.delete_realtime_RACE

# Register realtime_RACE in _smoothfir:
_smoothfir.realtime_RACE_swigregister(realtime_RACE)

class SFLOGIC_RACE(SFLOGIC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _sfconf, _icomm, _sfaccess):
        _smoothfir.SFLOGIC_RACE_swiginit(self, _smoothfir.new_SFLOGIC_RACE(_sfconf, _icomm, _sfaccess))
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_RACE

    def preinit(self, sfparams, _debug):
        return _smoothfir.SFLOGIC_RACE_preinit(self, sfparams, _debug)

    def init(self, event_fd, synch_sem):
        return _smoothfir.SFLOGIC_RACE_init(self, event_fd, synch_sem)

    def set_config(self, direct_coeff, cross_coeff, nscale, ndelay, nlowFreq, nlowSlope, nhighFreq, nhighSlope):
        return _smoothfir.SFLOGIC_RACE_set_config(self, direct_coeff, cross_coeff, nscale, ndelay, nlowFreq, nlowSlope, nhighFreq, nhighSlope)

    def change_config(self, nscale, ndelay, nlowFreq, nlowSlope, nhighFreq, nhighSlope):
        return _smoothfir.SFLOGIC_RACE_change_config(self, nscale, ndelay, nlowFreq, nlowSlope, nhighFreq, nhighSlope)

# Register SFLOGIC_RACE in _smoothfir:
_smoothfir.SFLOGIC_RACE_swigregister(SFLOGIC_RACE)

MAX_EQUALISERS = _smoothfir.MAX_EQUALISERS
MAX_BANDS = _smoothfir.MAX_BANDS
MSGSIZE = _smoothfir.MSGSIZE
CMD_CHANGE_MAGNITUDE = _smoothfir.CMD_CHANGE_MAGNITUDE
CMD_CHANGE_PHASE = _smoothfir.CMD_CHANGE_PHASE
CMD_GET_INFO = _smoothfir.CMD_GET_INFO

def trim(str):
    return _smoothfir.trim(str)
class realtime_eq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ifftplan = property(_smoothfir.realtime_eq_ifftplan_get, _smoothfir.realtime_eq_ifftplan_set)
    band_count = property(_smoothfir.realtime_eq_band_count_get, _smoothfir.realtime_eq_band_count_set)
    taps = property(_smoothfir.realtime_eq_taps_get, _smoothfir.realtime_eq_taps_set)
    minphase = property(_smoothfir.realtime_eq_minphase_get, _smoothfir.realtime_eq_minphase_set)
    coeff = property(_smoothfir.realtime_eq_coeff_get, _smoothfir.realtime_eq_coeff_set)
    active_coeff = property(_smoothfir.realtime_eq_active_coeff_get, _smoothfir.realtime_eq_active_coeff_set)
    not_changed = property(_smoothfir.realtime_eq_not_changed_get, _smoothfir.realtime_eq_not_changed_set)
    freq = property(_smoothfir.realtime_eq_freq_get, _smoothfir.realtime_eq_freq_set)
    mag = property(_smoothfir.realtime_eq_mag_get, _smoothfir.realtime_eq_mag_set)
    phase = property(_smoothfir.realtime_eq_phase_get, _smoothfir.realtime_eq_phase_set)

    def __init__(self):
        _smoothfir.realtime_eq_swiginit(self, _smoothfir.new_realtime_eq())
    __swig_destroy__ = _smoothfir.delete_realtime_eq

# Register realtime_eq in _smoothfir:
_smoothfir.realtime_eq_swigregister(realtime_eq)

class SFLOGIC_EQ(SFLOGIC):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _sfconf, _icomm, _sfaccess):
        _smoothfir.SFLOGIC_EQ_swiginit(self, _smoothfir.new_SFLOGIC_EQ(_sfconf, _icomm, _sfaccess))
    __swig_destroy__ = _smoothfir.delete_SFLOGIC_EQ

    def preinit(self, sfparams, _debug):
        return _smoothfir.SFLOGIC_EQ_preinit(self, sfparams, _debug)

    def config(self, n_eq, _coeff_name, _minphase, _std):
        return _smoothfir.SFLOGIC_EQ_config(self, n_eq, _coeff_name, _minphase, _std)

    def init(self, event_fd, synch_sem):
        return _smoothfir.SFLOGIC_EQ_init(self, event_fd, synch_sem)

    def change_magnitude(self, n_eq, nfreq, mag):
        return _smoothfir.SFLOGIC_EQ_change_magnitude(self, n_eq, nfreq, mag)

    def change_rendering(self, n_eq):
        return _smoothfir.SFLOGIC_EQ_change_rendering(self, n_eq)

# Register SFLOGIC_EQ in _smoothfir:
_smoothfir.SFLOGIC_EQ_swigregister(SFLOGIC_EQ)

O_LARGEFILE = _smoothfir.O_LARGEFILE
CB_MSG_START = _smoothfir.CB_MSG_START
CB_MSG_STOP = _smoothfir.CB_MSG_STOP
class dai_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    subdev_params = property(_smoothfir.dai_params_subdev_params_get, _smoothfir.dai_params_subdev_params_set)
    subdev_index = property(_smoothfir.dai_params_subdev_index_get, _smoothfir.dai_params_subdev_index_set)
    psize = property(_smoothfir.dai_params_psize_get, _smoothfir.dai_params_psize_set)
    params = property(_smoothfir.dai_params_params_get, _smoothfir.dai_params_params_set)
    ans = property(_smoothfir.dai_params_ans_get, _smoothfir.dai_params_ans_set)
    msize = property(_smoothfir.dai_params_msize_get, _smoothfir.dai_params_msize_set)
    msgstr = property(_smoothfir.dai_params_msgstr_get, _smoothfir.dai_params_msgstr_set)

    def __init__(self):
        _smoothfir.dai_params_swiginit(self, _smoothfir.new_dai_params())
    __swig_destroy__ = _smoothfir.delete_dai_params

# Register dai_params in _smoothfir:
_smoothfir.dai_params_swigregister(dai_params)

class comarea(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    blocking_stopped = property(_smoothfir.comarea_blocking_stopped_get, _smoothfir.comarea_blocking_stopped_set)
    lastbuf_index = property(_smoothfir.comarea_lastbuf_index_get, _smoothfir.comarea_lastbuf_index_set)
    frames_left = property(_smoothfir.comarea_frames_left_get, _smoothfir.comarea_frames_left_set)
    cb_lastbuf_index = property(_smoothfir.comarea_cb_lastbuf_index_get, _smoothfir.comarea_cb_lastbuf_index_set)
    cb_frames_left = property(_smoothfir.comarea_cb_frames_left_get, _smoothfir.comarea_cb_frames_left_set)
    is_muted = property(_smoothfir.comarea_is_muted_get, _smoothfir.comarea_is_muted_set)
    delay = property(_smoothfir.comarea_delay_get, _smoothfir.comarea_delay_set)
    pid = property(_smoothfir.comarea_pid_get, _smoothfir.comarea_pid_set)
    callback_pid = property(_smoothfir.comarea_callback_pid_get, _smoothfir.comarea_callback_pid_set)
    dev = property(_smoothfir.comarea_dev_get, _smoothfir.comarea_dev_set)
    buffer_format = property(_smoothfir.comarea_buffer_format_get, _smoothfir.comarea_buffer_format_set)
    buffer_id = property(_smoothfir.comarea_buffer_id_get, _smoothfir.comarea_buffer_id_set)
    cb_buf_index = property(_smoothfir.comarea_cb_buf_index_get, _smoothfir.comarea_cb_buf_index_set)

    def __init__(self):
        _smoothfir.comarea_swiginit(self, _smoothfir.new_comarea())
    __swig_destroy__ = _smoothfir.delete_comarea

# Register comarea in _smoothfir:
_smoothfir.comarea_swigregister(comarea)

class Dai(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dai_buffer_format = property(_smoothfir.Dai_dai_buffer_format_get, _smoothfir.Dai_dai_buffer_format_set)
    buffers = property(_smoothfir.Dai_buffers_get, _smoothfir.Dai_buffers_set)

    def __init__(self, _sfconf, _icomm, _callbackClass):
        _smoothfir.Dai_swiginit(self, _smoothfir.new_Dai(_sfconf, _icomm, _callbackClass))

    def Dai_init(self, _sfDelay):
        return _smoothfir.Dai_Dai_init(self, _sfDelay)
    __swig_destroy__ = _smoothfir.delete_Dai

    def trigger_callback_io(self):
        return _smoothfir.Dai_trigger_callback_io(self)

    def minblocksize(self):
        return _smoothfir.Dai_minblocksize(self)

    def get_input_poll_mode(self):
        return _smoothfir.Dai_get_input_poll_mode(self)

    def isinit(self):
        return _smoothfir.Dai_isinit(self)

    def toggle_mute(self, io, channel):
        return _smoothfir.Dai_toggle_mute(self, io, channel)

    def change_delay(self, io, channel, delay):
        return _smoothfir.Dai_change_delay(self, io, channel, delay)

    def die(self):
        return _smoothfir.Dai_die(self)

    @staticmethod
    def callback_process_thread(args):
        return _smoothfir.Dai_callback_process_thread(args)

    def process_callback_input(self, sd, cbbufs, frame_count):
        return _smoothfir.Dai_process_callback_input(self, sd, cbbufs, frame_count)

    def process_callback_output(self, sd, cbbufs, frame_count, iodelay_fill):
        return _smoothfir.Dai_process_callback_output(self, sd, cbbufs, frame_count, iodelay_fill)

    def process_callback(self, states, state_count, buffers, frame_count, event):
        return _smoothfir.Dai_process_callback(self, states, state_count, buffers, frame_count, event)

# Register Dai in _smoothfir:
_smoothfir.Dai_swigregister(Dai)

def Dai_callback_process_thread(args):
    return _smoothfir.Dai_callback_process_thread(args)

class filter_process_input(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inbuf = property(_smoothfir.filter_process_input_inbuf_get, _smoothfir.filter_process_input_inbuf_set)
    outbuf = property(_smoothfir.filter_process_input_outbuf_get, _smoothfir.filter_process_input_outbuf_set)
    input_freqcbuf = property(_smoothfir.filter_process_input_input_freqcbuf_get, _smoothfir.filter_process_input_input_freqcbuf_set)
    output_freqcbuf = property(_smoothfir.filter_process_input_output_freqcbuf_get, _smoothfir.filter_process_input_output_freqcbuf_set)
    filter_read = property(_smoothfir.filter_process_input_filter_read_get, _smoothfir.filter_process_input_filter_read_set)
    filter_write = property(_smoothfir.filter_process_input_filter_write_get, _smoothfir.filter_process_input_filter_write_set)
    input_read = property(_smoothfir.filter_process_input_input_read_get, _smoothfir.filter_process_input_input_read_set)
    cb_input_read = property(_smoothfir.filter_process_input_cb_input_read_get, _smoothfir.filter_process_input_cb_input_read_set)
    output_write = property(_smoothfir.filter_process_input_output_write_get, _smoothfir.filter_process_input_output_write_set)
    cb_output_write = property(_smoothfir.filter_process_input_cb_output_write_get, _smoothfir.filter_process_input_cb_output_write_set)
    n_procinputs = property(_smoothfir.filter_process_input_n_procinputs_get, _smoothfir.filter_process_input_n_procinputs_set)
    procinputs = property(_smoothfir.filter_process_input_procinputs_get, _smoothfir.filter_process_input_procinputs_set)
    n_procoutputs = property(_smoothfir.filter_process_input_n_procoutputs_get, _smoothfir.filter_process_input_n_procoutputs_set)
    procoutputs = property(_smoothfir.filter_process_input_procoutputs_get, _smoothfir.filter_process_input_procoutputs_set)
    n_inputs = property(_smoothfir.filter_process_input_n_inputs_get, _smoothfir.filter_process_input_n_inputs_set)
    inputs = property(_smoothfir.filter_process_input_inputs_get, _smoothfir.filter_process_input_inputs_set)
    n_outputs = property(_smoothfir.filter_process_input_n_outputs_get, _smoothfir.filter_process_input_n_outputs_set)
    outputs = property(_smoothfir.filter_process_input_outputs_get, _smoothfir.filter_process_input_outputs_set)
    n_filters = property(_smoothfir.filter_process_input_n_filters_get, _smoothfir.filter_process_input_n_filters_set)
    filters = property(_smoothfir.filter_process_input_filters_get, _smoothfir.filter_process_input_filters_set)
    process_index = property(_smoothfir.filter_process_input_process_index_get, _smoothfir.filter_process_input_process_index_set)
    has_bl_input_devs = property(_smoothfir.filter_process_input_has_bl_input_devs_get, _smoothfir.filter_process_input_has_bl_input_devs_set)
    has_bl_output_devs = property(_smoothfir.filter_process_input_has_bl_output_devs_get, _smoothfir.filter_process_input_has_bl_output_devs_set)
    has_cb_input_devs = property(_smoothfir.filter_process_input_has_cb_input_devs_get, _smoothfir.filter_process_input_has_cb_input_devs_set)
    has_cb_output_devs = property(_smoothfir.filter_process_input_has_cb_output_devs_get, _smoothfir.filter_process_input_has_cb_output_devs_set)

    def __init__(self):
        _smoothfir.filter_process_input_swiginit(self, _smoothfir.new_filter_process_input())
    __swig_destroy__ = _smoothfir.delete_filter_process_input

# Register filter_process_input in _smoothfir:
_smoothfir.filter_process_input_swigregister(filter_process_input)

class output_process_input(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter_sem = property(_smoothfir.output_process_input_filter_sem_get, _smoothfir.output_process_input_filter_sem_set)
    synch_sem = property(_smoothfir.output_process_input_synch_sem_get, _smoothfir.output_process_input_synch_sem_set)
    input_sem = property(_smoothfir.output_process_input_input_sem_get, _smoothfir.output_process_input_input_sem_set)
    extra_input_sem = property(_smoothfir.output_process_input_extra_input_sem_get, _smoothfir.output_process_input_extra_input_sem_set)
    trigger_callback_io = property(_smoothfir.output_process_input_trigger_callback_io_get, _smoothfir.output_process_input_trigger_callback_io_set)
    checkdrift = property(_smoothfir.output_process_input_checkdrift_get, _smoothfir.output_process_input_checkdrift_set)

    def __init__(self):
        _smoothfir.output_process_input_swiginit(self, _smoothfir.new_output_process_input())
    __swig_destroy__ = _smoothfir.delete_output_process_input

# Register output_process_input in _smoothfir:
_smoothfir.output_process_input_swigregister(output_process_input)

class input_process_input(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    buf = property(_smoothfir.input_process_input_buf_get, _smoothfir.input_process_input_buf_set)
    filter_sem = property(_smoothfir.input_process_input_filter_sem_get, _smoothfir.input_process_input_filter_sem_set)
    output_sem = property(_smoothfir.input_process_input_output_sem_get, _smoothfir.input_process_input_output_sem_set)
    extra_output_sem = property(_smoothfir.input_process_input_extra_output_sem_get, _smoothfir.input_process_input_extra_output_sem_set)
    synch_sem = property(_smoothfir.input_process_input_synch_sem_get, _smoothfir.input_process_input_synch_sem_set)

    def __init__(self):
        _smoothfir.input_process_input_swiginit(self, _smoothfir.new_input_process_input())
    __swig_destroy__ = _smoothfir.delete_input_process_input

# Register input_process_input in _smoothfir:
_smoothfir.input_process_input_swigregister(input_process_input)

class SfRun(SfAccess, SfCallback):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sfConv = property(_smoothfir.SfRun_sfConv_get, _smoothfir.SfRun_sfConv_set)
    sfDai = property(_smoothfir.SfRun_sfDai_get, _smoothfir.SfRun_sfDai_set)
    sfDelay = property(_smoothfir.SfRun_sfDelay_get, _smoothfir.SfRun_sfDelay_set)
    sflogic = property(_smoothfir.SfRun_sflogic_get, _smoothfir.SfRun_sflogic_set)
    sfconf = property(_smoothfir.SfRun_sfconf_get, _smoothfir.SfRun_sfconf_set)
    icomm = property(_smoothfir.SfRun_icomm_get, _smoothfir.SfRun_icomm_set)
    isinit = property(_smoothfir.SfRun_isinit_get, _smoothfir.SfRun_isinit_set)
    rti_isinit = property(_smoothfir.SfRun_rti_isinit_get, _smoothfir.SfRun_rti_isinit_set)

    def __init__(self, _sfconf, _icomm):
        _smoothfir.SfRun_swiginit(self, _smoothfir.new_SfRun(_sfconf, _icomm))
    __swig_destroy__ = _smoothfir.delete_SfRun

    def ismuted(self, io, channel):
        return _smoothfir.SfRun_ismuted(self, io, channel)

    def toggle_mute(self, io, channel):
        return _smoothfir.SfRun_toggle_mute(self, io, channel)

    def set_delay(self, io, channel, delay):
        return _smoothfir.SfRun_set_delay(self, io, channel, delay)

    def get_delay(self, io, channel):
        return _smoothfir.SfRun_get_delay(self, io, channel)

    def print_overflows(self):
        return _smoothfir.SfRun_print_overflows(self)

    def check_overflows(self):
        return _smoothfir.SfRun_check_overflows(self)

    def rti_and_overflow(self):
        return _smoothfir.SfRun_rti_and_overflow(self)

    def icomm_mutex(self, lock):
        return _smoothfir.SfRun_icomm_mutex(self, lock)

    def memiszero(self, buf, size):
        return _smoothfir.SfRun_memiszero(self, buf, size)

    def test_silent(self, buf, size, realsize, analog_powersave, scale):
        return _smoothfir.SfRun_test_silent(self, buf, size, realsize, analog_powersave, scale)

    def dai_trigger_callback_thread(self, args):
        return _smoothfir.SfRun_dai_trigger_callback_thread(self, args)

    def filter_process(self):
        return _smoothfir.SfRun_filter_process(self)

    def sf_callback_ready(self, io):
        return _smoothfir.SfRun_sf_callback_ready(self, io)

    @staticmethod
    def module_init_thread(args):
        return _smoothfir.SfRun_module_init_thread(args)

    def preinit(self, _sfConv, _sfDelay, _sflogic):
        return _smoothfir.SfRun_preinit(self, _sfConv, _sfDelay, _sflogic)

    def sfrun(self, _sfConv, _sfDelay, _sflogic):
        return _smoothfir.SfRun_sfrun(self, _sfConv, _sfDelay, _sflogic)

    def realtime_index(self):
        return _smoothfir.SfRun_realtime_index(self)

    def reset_peak(self):
        return _smoothfir.SfRun_reset_peak(self)

    def sflogic_names(self, n_names):
        return _smoothfir.SfRun_sflogic_names(self, n_names)

    def sfio_range(self, io, modindex, range):
        return _smoothfir.SfRun_sfio_range(self, io, modindex, range)

    def sf_make_realtime(self, pid, priority, name):
        return _smoothfir.SfRun_sf_make_realtime(self, pid, priority, name)

    def convolver_raw2cbuf(self, rawbuf, cbuf, next_cbuf, sf, overflow):
        return _smoothfir.SfRun_convolver_raw2cbuf(self, rawbuf, cbuf, next_cbuf, sf, overflow)

    def convolver_fftplan(self, order, invert, inplace):
        return _smoothfir.SfRun_convolver_fftplan(self, order, invert, inplace)

    def convolver_coeffs2cbuf(self, src, dest):
        return _smoothfir.SfRun_convolver_coeffs2cbuf(self, src, dest)

    def convolver_cbuf2raw(self, cbuf, outbuf, sf, apply_dither, dither_state, overflow):
        return _smoothfir.SfRun_convolver_cbuf2raw(self, cbuf, outbuf, sf, apply_dither, dither_state, overflow)

    def sfstop(self):
        return _smoothfir.SfRun_sfstop(self)

# Register SfRun in _smoothfir:
_smoothfir.SfRun_swigregister(SfRun)

def SfRun_module_init_thread(args):
    return _smoothfir.SfRun_module_init_thread(args)

class smoothfir(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sfconf = property(_smoothfir.smoothfir_sfconf_get, _smoothfir.smoothfir_sfconf_set)
    icomm = property(_smoothfir.smoothfir_icomm_get, _smoothfir.smoothfir_icomm_set)
    sfaccess = property(_smoothfir.smoothfir_sfaccess_get, _smoothfir.smoothfir_sfaccess_set)

    def __init__(self):
        _smoothfir.smoothfir_swiginit(self, _smoothfir.new_smoothfir())
    __swig_destroy__ = _smoothfir.delete_smoothfir
    sfConf = property(_smoothfir.smoothfir_sfConf_get, _smoothfir.smoothfir_sfConf_set)
    sfRun = property(_smoothfir.smoothfir_sfRun_get, _smoothfir.smoothfir_sfRun_set)

# Register smoothfir in _smoothfir:
_smoothfir.smoothfir_swigregister(smoothfir)

class jack_state(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n_channels = property(_smoothfir.jack_state_n_channels_get, _smoothfir.jack_state_n_channels_set)
    ports = property(_smoothfir.jack_state_ports_get, _smoothfir.jack_state_ports_set)
    port_name = property(_smoothfir.jack_state_port_name_get, _smoothfir.jack_state_port_name_set)
    local_port_name = property(_smoothfir.jack_state_local_port_name_get, _smoothfir.jack_state_local_port_name_set)
    dest_name = property(_smoothfir.jack_state_dest_name_get, _smoothfir.jack_state_dest_name_set)

    def __init__(self):
        _smoothfir.jack_state_swiginit(self, _smoothfir.new_jack_state())
    __swig_destroy__ = _smoothfir.delete_jack_state

# Register jack_state in _smoothfir:
_smoothfir.jack_state_swigregister(jack_state)

class ioJack(IO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    expected_priority = property(_smoothfir.ioJack_expected_priority_get, _smoothfir.ioJack_expected_priority_set)

    def __init__(self, _sfconf, _icomm, _sfDai):
        _smoothfir.ioJack_swiginit(self, _smoothfir.new_ioJack(_sfconf, _icomm, _sfDai))

    def preinit(self, io, _iodev):
        return _smoothfir.ioJack_preinit(self, io, _iodev)
    __swig_destroy__ = _smoothfir.delete_ioJack

    @staticmethod
    def init_callback(arg):
        return _smoothfir.ioJack_init_callback(arg)

    @staticmethod
    def init_callback_():
        return _smoothfir.ioJack_init_callback_()

    @staticmethod
    def latency_callback(mode, arg):
        return _smoothfir.ioJack_latency_callback(mode, arg)

    def sf_latency_callback(self, mode):
        return _smoothfir.ioJack_sf_latency_callback(self, mode)

    @staticmethod
    def jack_shutdown_callback(arg):
        return _smoothfir.ioJack_jack_shutdown_callback(arg)

    @staticmethod
    def error_callback(msg):
        return _smoothfir.ioJack_error_callback(msg)

    def sf_shutdown_callback(self):
        return _smoothfir.ioJack_sf_shutdown_callback(self)

    @staticmethod
    def jack_process_callback(n_frames, arg):
        return _smoothfir.ioJack_jack_process_callback(n_frames, arg)

    def sf_process_callback(self, n_frames):
        return _smoothfir.ioJack_sf_process_callback(self, n_frames)

    def init(self, io, i_handle, used_channels, channel_selection, callback_subdev):
        return _smoothfir.ioJack_init(self, io, i_handle, used_channels, channel_selection, callback_subdev)

    def synch_start(self):
        return _smoothfir.ioJack_synch_start(self)

    def synch_stop(self):
        return _smoothfir.ioJack_synch_stop(self)

    def connect_port(self, port_name, dest_name):
        return _smoothfir.ioJack_connect_port(self, port_name, dest_name)

    def disconnect_port(self, port_name, dest_name):
        return _smoothfir.ioJack_disconnect_port(self, port_name, dest_name)

    def get_jack_port_connections(self, port_name):
        return _smoothfir.ioJack_get_jack_port_connections(self, port_name)

    def get_jack_ports(self):
        return _smoothfir.ioJack_get_jack_ports(self)

    def get_jack_input_physical_ports(self):
        return _smoothfir.ioJack_get_jack_input_physical_ports(self)

    def get_jack_input_ports(self):
        return _smoothfir.ioJack_get_jack_input_ports(self)

    def get_jack_output_physical_ports(self):
        return _smoothfir.ioJack_get_jack_output_physical_ports(self)

    def get_jack_output_ports(self):
        return _smoothfir.ioJack_get_jack_output_ports(self)

    def is_running(self):
        return _smoothfir.ioJack_is_running(self)

# Register ioJack in _smoothfir:
_smoothfir.ioJack_swigregister(ioJack)

def ioJack_init_callback(arg):
    return _smoothfir.ioJack_init_callback(arg)

def ioJack_init_callback_():
    return _smoothfir.ioJack_init_callback_()

def ioJack_latency_callback(mode, arg):
    return _smoothfir.ioJack_latency_callback(mode, arg)

def ioJack_jack_shutdown_callback(arg):
    return _smoothfir.ioJack_jack_shutdown_callback(arg)

def ioJack_error_callback(msg):
    return _smoothfir.ioJack_error_callback(msg)

def ioJack_jack_process_callback(n_frames, arg):
    return _smoothfir.ioJack_jack_process_callback(n_frames, arg)

class intVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.intVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.intVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.intVector___bool__(self)

    def __len__(self):
        return _smoothfir.intVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.intVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.intVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.intVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.intVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.intVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.intVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.intVector_pop(self)

    def append(self, x):
        return _smoothfir.intVector_append(self, x)

    def empty(self):
        return _smoothfir.intVector_empty(self)

    def size(self):
        return _smoothfir.intVector_size(self)

    def swap(self, v):
        return _smoothfir.intVector_swap(self, v)

    def begin(self):
        return _smoothfir.intVector_begin(self)

    def end(self):
        return _smoothfir.intVector_end(self)

    def rbegin(self):
        return _smoothfir.intVector_rbegin(self)

    def rend(self):
        return _smoothfir.intVector_rend(self)

    def clear(self):
        return _smoothfir.intVector_clear(self)

    def get_allocator(self):
        return _smoothfir.intVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.intVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.intVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.intVector_swiginit(self, _smoothfir.new_intVector(*args))

    def push_back(self, x):
        return _smoothfir.intVector_push_back(self, x)

    def front(self):
        return _smoothfir.intVector_front(self)

    def back(self):
        return _smoothfir.intVector_back(self)

    def assign(self, n, x):
        return _smoothfir.intVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.intVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.intVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.intVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.intVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_intVector

# Register intVector in _smoothfir:
_smoothfir.intVector_swigregister(intVector)

class doubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.doubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.doubleVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.doubleVector___bool__(self)

    def __len__(self):
        return _smoothfir.doubleVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.doubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.doubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.doubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.doubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.doubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.doubleVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.doubleVector_pop(self)

    def append(self, x):
        return _smoothfir.doubleVector_append(self, x)

    def empty(self):
        return _smoothfir.doubleVector_empty(self)

    def size(self):
        return _smoothfir.doubleVector_size(self)

    def swap(self, v):
        return _smoothfir.doubleVector_swap(self, v)

    def begin(self):
        return _smoothfir.doubleVector_begin(self)

    def end(self):
        return _smoothfir.doubleVector_end(self)

    def rbegin(self):
        return _smoothfir.doubleVector_rbegin(self)

    def rend(self):
        return _smoothfir.doubleVector_rend(self)

    def clear(self):
        return _smoothfir.doubleVector_clear(self)

    def get_allocator(self):
        return _smoothfir.doubleVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.doubleVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.doubleVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.doubleVector_swiginit(self, _smoothfir.new_doubleVector(*args))

    def push_back(self, x):
        return _smoothfir.doubleVector_push_back(self, x)

    def front(self):
        return _smoothfir.doubleVector_front(self)

    def back(self):
        return _smoothfir.doubleVector_back(self)

    def assign(self, n, x):
        return _smoothfir.doubleVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.doubleVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.doubleVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.doubleVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.doubleVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_doubleVector

# Register doubleVector in _smoothfir:
_smoothfir.doubleVector_swigregister(doubleVector)

class sfchannelVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.sfchannelVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.sfchannelVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.sfchannelVector___bool__(self)

    def __len__(self):
        return _smoothfir.sfchannelVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.sfchannelVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.sfchannelVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.sfchannelVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.sfchannelVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.sfchannelVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.sfchannelVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.sfchannelVector_pop(self)

    def append(self, x):
        return _smoothfir.sfchannelVector_append(self, x)

    def empty(self):
        return _smoothfir.sfchannelVector_empty(self)

    def size(self):
        return _smoothfir.sfchannelVector_size(self)

    def swap(self, v):
        return _smoothfir.sfchannelVector_swap(self, v)

    def begin(self):
        return _smoothfir.sfchannelVector_begin(self)

    def end(self):
        return _smoothfir.sfchannelVector_end(self)

    def rbegin(self):
        return _smoothfir.sfchannelVector_rbegin(self)

    def rend(self):
        return _smoothfir.sfchannelVector_rend(self)

    def clear(self):
        return _smoothfir.sfchannelVector_clear(self)

    def get_allocator(self):
        return _smoothfir.sfchannelVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.sfchannelVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.sfchannelVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.sfchannelVector_swiginit(self, _smoothfir.new_sfchannelVector(*args))

    def push_back(self, x):
        return _smoothfir.sfchannelVector_push_back(self, x)

    def front(self):
        return _smoothfir.sfchannelVector_front(self)

    def back(self):
        return _smoothfir.sfchannelVector_back(self)

    def assign(self, n, x):
        return _smoothfir.sfchannelVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.sfchannelVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.sfchannelVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.sfchannelVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.sfchannelVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sfchannelVector

# Register sfchannelVector in _smoothfir:
_smoothfir.sfchannelVector_swigregister(sfchannelVector)

class sfcoeffVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.sfcoeffVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.sfcoeffVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.sfcoeffVector___bool__(self)

    def __len__(self):
        return _smoothfir.sfcoeffVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.sfcoeffVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.sfcoeffVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.sfcoeffVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.sfcoeffVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.sfcoeffVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.sfcoeffVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.sfcoeffVector_pop(self)

    def append(self, x):
        return _smoothfir.sfcoeffVector_append(self, x)

    def empty(self):
        return _smoothfir.sfcoeffVector_empty(self)

    def size(self):
        return _smoothfir.sfcoeffVector_size(self)

    def swap(self, v):
        return _smoothfir.sfcoeffVector_swap(self, v)

    def begin(self):
        return _smoothfir.sfcoeffVector_begin(self)

    def end(self):
        return _smoothfir.sfcoeffVector_end(self)

    def rbegin(self):
        return _smoothfir.sfcoeffVector_rbegin(self)

    def rend(self):
        return _smoothfir.sfcoeffVector_rend(self)

    def clear(self):
        return _smoothfir.sfcoeffVector_clear(self)

    def get_allocator(self):
        return _smoothfir.sfcoeffVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.sfcoeffVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.sfcoeffVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.sfcoeffVector_swiginit(self, _smoothfir.new_sfcoeffVector(*args))

    def push_back(self, x):
        return _smoothfir.sfcoeffVector_push_back(self, x)

    def front(self):
        return _smoothfir.sfcoeffVector_front(self)

    def back(self):
        return _smoothfir.sfcoeffVector_back(self)

    def assign(self, n, x):
        return _smoothfir.sfcoeffVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.sfcoeffVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.sfcoeffVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.sfcoeffVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.sfcoeffVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sfcoeffVector

# Register sfcoeffVector in _smoothfir:
_smoothfir.sfcoeffVector_swigregister(sfcoeffVector)

class sffilterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.sffilterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.sffilterVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.sffilterVector___bool__(self)

    def __len__(self):
        return _smoothfir.sffilterVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.sffilterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.sffilterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.sffilterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.sffilterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.sffilterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.sffilterVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.sffilterVector_pop(self)

    def append(self, x):
        return _smoothfir.sffilterVector_append(self, x)

    def empty(self):
        return _smoothfir.sffilterVector_empty(self)

    def size(self):
        return _smoothfir.sffilterVector_size(self)

    def swap(self, v):
        return _smoothfir.sffilterVector_swap(self, v)

    def begin(self):
        return _smoothfir.sffilterVector_begin(self)

    def end(self):
        return _smoothfir.sffilterVector_end(self)

    def rbegin(self):
        return _smoothfir.sffilterVector_rbegin(self)

    def rend(self):
        return _smoothfir.sffilterVector_rend(self)

    def clear(self):
        return _smoothfir.sffilterVector_clear(self)

    def get_allocator(self):
        return _smoothfir.sffilterVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.sffilterVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.sffilterVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.sffilterVector_swiginit(self, _smoothfir.new_sffilterVector(*args))

    def push_back(self, x):
        return _smoothfir.sffilterVector_push_back(self, x)

    def front(self):
        return _smoothfir.sffilterVector_front(self)

    def back(self):
        return _smoothfir.sffilterVector_back(self)

    def assign(self, n, x):
        return _smoothfir.sffilterVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.sffilterVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.sffilterVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.sffilterVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.sffilterVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sffilterVector

# Register sffilterVector in _smoothfir:
_smoothfir.sffilterVector_swigregister(sffilterVector)

class sffilter_controlVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.sffilter_controlVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.sffilter_controlVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.sffilter_controlVector___bool__(self)

    def __len__(self):
        return _smoothfir.sffilter_controlVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.sffilter_controlVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.sffilter_controlVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.sffilter_controlVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.sffilter_controlVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.sffilter_controlVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.sffilter_controlVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.sffilter_controlVector_pop(self)

    def append(self, x):
        return _smoothfir.sffilter_controlVector_append(self, x)

    def empty(self):
        return _smoothfir.sffilter_controlVector_empty(self)

    def size(self):
        return _smoothfir.sffilter_controlVector_size(self)

    def swap(self, v):
        return _smoothfir.sffilter_controlVector_swap(self, v)

    def begin(self):
        return _smoothfir.sffilter_controlVector_begin(self)

    def end(self):
        return _smoothfir.sffilter_controlVector_end(self)

    def rbegin(self):
        return _smoothfir.sffilter_controlVector_rbegin(self)

    def rend(self):
        return _smoothfir.sffilter_controlVector_rend(self)

    def clear(self):
        return _smoothfir.sffilter_controlVector_clear(self)

    def get_allocator(self):
        return _smoothfir.sffilter_controlVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.sffilter_controlVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.sffilter_controlVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.sffilter_controlVector_swiginit(self, _smoothfir.new_sffilter_controlVector(*args))

    def push_back(self, x):
        return _smoothfir.sffilter_controlVector_push_back(self, x)

    def front(self):
        return _smoothfir.sffilter_controlVector_front(self)

    def back(self):
        return _smoothfir.sffilter_controlVector_back(self)

    def assign(self, n, x):
        return _smoothfir.sffilter_controlVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.sffilter_controlVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.sffilter_controlVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.sffilter_controlVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.sffilter_controlVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sffilter_controlVector

# Register sffilter_controlVector in _smoothfir:
_smoothfir.sffilter_controlVector_swigregister(sffilter_controlVector)

class sfoverflowVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.sfoverflowVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.sfoverflowVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.sfoverflowVector___bool__(self)

    def __len__(self):
        return _smoothfir.sfoverflowVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.sfoverflowVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.sfoverflowVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.sfoverflowVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.sfoverflowVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.sfoverflowVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.sfoverflowVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.sfoverflowVector_pop(self)

    def append(self, x):
        return _smoothfir.sfoverflowVector_append(self, x)

    def empty(self):
        return _smoothfir.sfoverflowVector_empty(self)

    def size(self):
        return _smoothfir.sfoverflowVector_size(self)

    def swap(self, v):
        return _smoothfir.sfoverflowVector_swap(self, v)

    def begin(self):
        return _smoothfir.sfoverflowVector_begin(self)

    def end(self):
        return _smoothfir.sfoverflowVector_end(self)

    def rbegin(self):
        return _smoothfir.sfoverflowVector_rbegin(self)

    def rend(self):
        return _smoothfir.sfoverflowVector_rend(self)

    def clear(self):
        return _smoothfir.sfoverflowVector_clear(self)

    def get_allocator(self):
        return _smoothfir.sfoverflowVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.sfoverflowVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.sfoverflowVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.sfoverflowVector_swiginit(self, _smoothfir.new_sfoverflowVector(*args))

    def push_back(self, x):
        return _smoothfir.sfoverflowVector_push_back(self, x)

    def front(self):
        return _smoothfir.sfoverflowVector_front(self)

    def back(self):
        return _smoothfir.sfoverflowVector_back(self)

    def assign(self, n, x):
        return _smoothfir.sfoverflowVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.sfoverflowVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.sfoverflowVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.sfoverflowVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.sfoverflowVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_sfoverflowVector

# Register sfoverflowVector in _smoothfir:
_smoothfir.sfoverflowVector_swigregister(sfoverflowVector)

class SFLOGICVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.SFLOGICVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.SFLOGICVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.SFLOGICVector___bool__(self)

    def __len__(self):
        return _smoothfir.SFLOGICVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.SFLOGICVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.SFLOGICVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.SFLOGICVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.SFLOGICVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.SFLOGICVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.SFLOGICVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.SFLOGICVector_pop(self)

    def append(self, x):
        return _smoothfir.SFLOGICVector_append(self, x)

    def empty(self):
        return _smoothfir.SFLOGICVector_empty(self)

    def size(self):
        return _smoothfir.SFLOGICVector_size(self)

    def swap(self, v):
        return _smoothfir.SFLOGICVector_swap(self, v)

    def begin(self):
        return _smoothfir.SFLOGICVector_begin(self)

    def end(self):
        return _smoothfir.SFLOGICVector_end(self)

    def rbegin(self):
        return _smoothfir.SFLOGICVector_rbegin(self)

    def rend(self):
        return _smoothfir.SFLOGICVector_rend(self)

    def clear(self):
        return _smoothfir.SFLOGICVector_clear(self)

    def get_allocator(self):
        return _smoothfir.SFLOGICVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.SFLOGICVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.SFLOGICVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.SFLOGICVector_swiginit(self, _smoothfir.new_SFLOGICVector(*args))

    def push_back(self, x):
        return _smoothfir.SFLOGICVector_push_back(self, x)

    def front(self):
        return _smoothfir.SFLOGICVector_front(self)

    def back(self):
        return _smoothfir.SFLOGICVector_back(self)

    def assign(self, n, x):
        return _smoothfir.SFLOGICVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.SFLOGICVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.SFLOGICVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.SFLOGICVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.SFLOGICVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_SFLOGICVector

# Register SFLOGICVector in _smoothfir:
_smoothfir.SFLOGICVector_swigregister(SFLOGICVector)

class SndFileManagerVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _smoothfir.SndFileManagerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _smoothfir.SndFileManagerVector___nonzero__(self)

    def __bool__(self):
        return _smoothfir.SndFileManagerVector___bool__(self)

    def __len__(self):
        return _smoothfir.SndFileManagerVector___len__(self)

    def __getslice__(self, i, j):
        return _smoothfir.SndFileManagerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _smoothfir.SndFileManagerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _smoothfir.SndFileManagerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _smoothfir.SndFileManagerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _smoothfir.SndFileManagerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _smoothfir.SndFileManagerVector___setitem__(self, *args)

    def pop(self):
        return _smoothfir.SndFileManagerVector_pop(self)

    def append(self, x):
        return _smoothfir.SndFileManagerVector_append(self, x)

    def empty(self):
        return _smoothfir.SndFileManagerVector_empty(self)

    def size(self):
        return _smoothfir.SndFileManagerVector_size(self)

    def swap(self, v):
        return _smoothfir.SndFileManagerVector_swap(self, v)

    def begin(self):
        return _smoothfir.SndFileManagerVector_begin(self)

    def end(self):
        return _smoothfir.SndFileManagerVector_end(self)

    def rbegin(self):
        return _smoothfir.SndFileManagerVector_rbegin(self)

    def rend(self):
        return _smoothfir.SndFileManagerVector_rend(self)

    def clear(self):
        return _smoothfir.SndFileManagerVector_clear(self)

    def get_allocator(self):
        return _smoothfir.SndFileManagerVector_get_allocator(self)

    def pop_back(self):
        return _smoothfir.SndFileManagerVector_pop_back(self)

    def erase(self, *args):
        return _smoothfir.SndFileManagerVector_erase(self, *args)

    def __init__(self, *args):
        _smoothfir.SndFileManagerVector_swiginit(self, _smoothfir.new_SndFileManagerVector(*args))

    def push_back(self, x):
        return _smoothfir.SndFileManagerVector_push_back(self, x)

    def front(self):
        return _smoothfir.SndFileManagerVector_front(self)

    def back(self):
        return _smoothfir.SndFileManagerVector_back(self)

    def assign(self, n, x):
        return _smoothfir.SndFileManagerVector_assign(self, n, x)

    def resize(self, *args):
        return _smoothfir.SndFileManagerVector_resize(self, *args)

    def insert(self, *args):
        return _smoothfir.SndFileManagerVector_insert(self, *args)

    def reserve(self, n):
        return _smoothfir.SndFileManagerVector_reserve(self, n)

    def capacity(self):
        return _smoothfir.SndFileManagerVector_capacity(self)
    __swig_destroy__ = _smoothfir.delete_SndFileManagerVector

# Register SndFileManagerVector in _smoothfir:
_smoothfir.SndFileManagerVector_swigregister(SndFileManagerVector)



class smoothfir_exec:

    def __init__(self, xml_config_file):
# smoothfir convolver object creation
        self.convolver = smoothfir()
# loading smoothfir config 
        self.convolver.sfConf.sfconf_init(xml_config_file)
# link to smoothfir configuration data
        self.config = self.convolver.sfConf.sfconf
# smoothfir agent object for realtime commands 
        self.agent = SFLOGIC_PY(self.convolver.sfConf.sfconf, self.convolver.sfConf.icomm, self.convolver.sfRun)
        self.convolver.sfConf.add_sflogic(self.agent)

    def start(self):
        self.convolver.sfRun.sfrun(self.convolver.sfConf.sfConv, self.convolver.sfConf.sfDelay, self.convolver.sfConf.sflogic)

    def stop(self):
        self.convolver.sfRun.sfstop()

    def getConvolver(self):
        return self.convolver




