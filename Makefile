###################################
# Where to install
INSTALL_PREFIX	= $(DESTDIR)/usr

###################################
# Where to find libraries, and their header files.
LIBPATHS	= -L/usr/lib
INCLUDE		= -I/usr/include
ifdef FFTW_PATH
LIBPATHS	+= -L$(FFTW_PATH)/lib
INCLUDE		+= -I$(FFTW_PATH)/include
endif

###################################
# FFTW3 libraries for single and double precision
FFTW_LIB	= -lfftw3 -lfftw3f

###################################
# Binaries
FLEX	= flex
LD	= ld
CC	= gcc
CPP     = g++
AS	= as

###################################
# Flags
CC_WARN		= -Wall
#CC_FLAGS	= $(DEFINE) -O2
CC_FLAGS	= $(DEFINE) -g `xml2-config --cflags`
CC_FPIC		= -fPIC
LD_SHARED	= -shared

###################################
# Objects and libs for targets
XML2_LIBS =  `xml2-config --libs`
BRUTEFIR_LIBS	= $(FFTW_LIB) -lsndfile -lm -pthread $(XML2_LIBS)
BRUTEFIR_OBJS	= bflogic_race.o bflogic_ladspa.o bflogic_eq.o bflogic_cli.o bflogic_py.o \
main.o brutefir.o fftw_convolver.o dai.o delay.o bfconf.o bfrun.o bfio_jack.o firwindow.o \
emalloc.o shmalloc.o dither.o
BRUTEFIR_IA32_OBJS = convolver_sse2.o convolver_sse.o \
convolver_3dnow.o convolver_x87.o

BFIO_FILE_OBJS	= bfio_file.fpic.o

BFIO_ALSA_LIBS	= -lasound
BFIO_ALSA_OBJS	= bfio_alsa.fpic.o emalloc.fpic.o

BFIO_JACK_LIBS	= -ljack
BFIO_JACK_OBJS	= bfio_jack.fpic.o emalloc.fpic.o

BIN_TARGETS	= brutefir
#LIB_TARGETS	= cli.bflogic eq.bflogic file.bfio

###################################
# System-specific settings

UNAME		= $(shell uname)
UNAME_P         = $(shell uname -p)
UNAME_M         = $(shell uname -m)

# Linux
ifeq ($(UNAME),Linux)
ifeq ($(UNAME_M),i386)
BRUTEFIR_OBJS	+= $(BRUTEFIR_IA32_OBJS)
endif
ifeq ($(UNAME_M),i586)
BRUTEFIR_OBJS	+= $(BRUTEFIR_IA32_OBJS)
endif
ifeq ($(UNAME_M),i686)
BRUTEFIR_OBJS	+= $(BRUTEFIR_IA32_OBJS)
endif
BRUTEFIR_LIBS	+= -ldl #-lelf32op
LDMULTIPLEDEFS	= -Xlinker --allow-multiple-definition
# assume that we have alsa, osss and jack
#LIB_TARGETS	+= alsa.bfio
#LIB_TARGETS	+= jack.bfio
endif

# Solaris
ifeq ($(UNAME),SunOS)
CC_WARN		= -Wall -Wlong-long -Wpointer-arith -Wshadow \
-Wcast-qual -Wwrite-strings -Wmissing-prototypes -Wmissing-declarations \
-Wnested-externs
ifeq ($(UNAME_P),sparc)
CC_FLAGS	+= -Wa,-xarch=v8plus
endif
BRUTEFIR_LIBS	+= -lrt -ldl
endif

# FreeBSD
ifeq ($(UNAME),FreeBSD)
ifeq ($(UNAME_M),i386)
BRUTEFIR_OBJS	+= $(BRUTEFIR_IA32_OBJS)
endif
endif

TARGETS		= $(BIN_TARGETS) #$(LIB_TARGETS)

###################################
# Targets

all: $(TARGETS)

%.o: %.s
	$(AS) -o $@			$<

%.fpic.o: %.c
	$(CC) -o $@			-c $(INCLUDE) $(CC_FPIC) $(CC_WARN) $(CC_FLAGS) $<

%.o: %.c
	$(CC) -o $@			-c $(INCLUDE) $(CC_WARN) $(CC_FLAGS) $<

%.o: %.cpp
	$(CPP) -o $@			-c $(INCLUDE) $(CC_WARN) $(CC_FLAGS) $<

# special rule to avoid to get warnings from code generated by flex
bfconf_lexical.o: bfconf_lexical.c
	$(CC) -o $@			-c $(INCLUDE) $(CC_FLAGS) $<

%.c: %.lex
	$(FLEX) -o$@ $<

brutefir: $(BRUTEFIR_OBJS)
	$(CPP) $(LIBPATHS) $(LDMULTIPLEDEFS) -o $@ $(BRUTEFIR_OBJS) $(BRUTEFIR_LIBS) $(BFIO_JACK_LIBS)

alsa.bfio: $(BFIO_ALSA_OBJS)
	$(LD) $(LD_SHARED) $(CC_FPIC) $(LIBPATHS) -o $@ $(BFIO_ALSA_OBJS) $(BFIO_ALSA_LIBS) $(XML2_LIBS) -lc

#jack.bfio: $(BFIO_JACK_OBJS)
#	$(LD) $(LD_SHARED) $(CC_FPIC) $(LIBPATHS) -o $@ $(BFIO_JACK_OBJS) $(BFIO_JACK_LIBS) $(XML2_LIBS) -lc

file.bfio: $(BFIO_FILE_OBJS)
	$(LD) $(LD_SHARED) $(CC_FPIC) $(LIBPATHS) -o $@ $(BFIO_FILE_OBJS) $(XML2_LIBS) -lc

eq.bflogic: $(BFLOGIC_EQ_OBJS)
	$(LD) $(LD_SHARED) $(CC_FPIC) $(LIBPATHS) -o $@ $(BFLOGIC_EQ_OBJS) $(FFTW_LIB) $(XML2_LIBS) -lc

install: $(BIN_TARGETS) #$(LIB_TARGETS)
	install -d $(INSTALL_PREFIX)/bin $(INSTALL_PREFIX)/lib/brutefir
	install $(BIN_TARGETS) $(INSTALL_PREFIX)/bin
#install $(LIB_TARGETS) $(INSTALL_PREFIX)/lib/brutefir

clean:
	rm -f *.core core bfconf_lexical.c $(BRUTEFIR_OBJS) $(BFIO_FILE_OBJS)  \
$(BFLOGIC_CLI_OBJS) $(BFLOGIC_EQ_OBJS) $(BFIO_ALSA_OBJS) $(BFIO_JACK_OBJS) $(TARGETS)
